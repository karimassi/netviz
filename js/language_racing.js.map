{"version":3,"sources":["language_racing.js"],"names":["RacingBarsAudio","svgElement","_classCallCheck","this","svg","currentData","datetext","width","height","margin","ini_date","Date","top_n","tickDuration","barPadding","setup","_this","dateSlice","length","filter","d","release_date","getTime","domain","d3","max","count","range","left","right","x","xScale","xAxis","axisTop","scale","ticks","tickSize","top","bottom","tickFormat","format","attr","concat","call","selectAll","classed","_this2","y","yScale","bars","data","audio","enter","append","replace","style","transition","duration","ease","easeLinear","rank","exit","remove","labels","_this3","text","valueLabel","tween","interpolate","t","Math","i","textContent","round","_this4","arr","date","lower","higher","mid","floor","midDate","Object","entries","map","_ref","_ref2","_slicedToArray","_this5","binarySearch","sort","a","b","slice","updateBars","setDate","getDate","updateValueLabels","createXaxis","instantiateRacingBars","data_path","MONTHS","TimeSelector","plot","updateData","getMonth","getFullYear","forEach","entry","showInitialPlot","undefined","country","delay","country_data","push","then","select"],"mappings":"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","file":"language_racing.js","sourcesContent":["//  code adapted from : https://bl.ocks.org/jrzief/70f1f8a5d066a286da3a1e699823470f\nclass RacingBarsAudio {\n  constructor(svgElement) {\n    this.svg = svgElement;\n    this.currentData = {};\n    this.datetext = {};\n    this.width = 0;\n    this.height = 0;\n    this.margin = {};\n    this.ini_date = new Date();\n    this.top_n = 0;\n    this.tickDuration = 0;\n    this.barPadding= 0 ;\n    this.setup()\n  }\n\n  xScale() {\n    let dateSlice = {};\n    if (this.currentData.length > 0) {\n      dateSlice = this.currentData.filter(d => d.release_date.getTime() == this.ini_date.getTime());\n    }\n    return d3.scaleLog()\n    .domain([1, d3.max(dateSlice, d => d.count)])\n    .range([this.margin.left, this.width-this.margin.right-65]);\n  }\n\n  createXaxis() {\n    let x = this.xScale() ;\n    let xAxis = d3.axisTop()\n      .scale(x)\n      .ticks(this.width > 500 ? 5:2)\n      .tickSize(-(this.height-this.margin.top-this.margin.bottom))\n      .tickFormat(d => d3.format(',')(d));\n\n    this.svg.append('g')\n      .attr('class', 'axis xAxis')\n      .attr('transform', `translate(0, ${this.margin.top})`)\n      .call(xAxis)\n      .selectAll('.tick line')\n      .classed('origin', d => d == 0);\n  }\n\n  yScale() {\n    return d3.scaleLinear()\n      .domain([this.top_n, 0])\n      .range([this.height-this.margin.bottom, this.margin.top]);\n  }\n\n  updateBars(dateSlice) {\n    let x = this.xScale().domain([1, d3.max(dateSlice, d => d.count)]);\n    let y = this.yScale();\n\n    let bars = this.svg.selectAll('.bar').data(dateSlice, d => d.audio);\n\n      bars\n        .enter()\n        .append('rect')\n        .attr('class', d => `bar ${d.audio.replace(/\\s/g,'_')}`)\n        .attr('x', x(1))\n        .attr( 'width',d => x(d.count)-x(1)-1)\n        .attr('y', d => y(this.top_n+1)+5)\n        .attr('height', y(1)-y(0)-this.barPadding)\n        .style('fill', '#db0000')\n        .transition()\n          .duration(this.tickDuration)\n          .ease(d3.easeLinear)\n          .attr('y', d => y(d.rank)+5);\n\n      bars\n      .transition()\n        .duration(this.tickDuration)\n        .ease(d3.easeLinear)\n        .attr('width', d => x(d.count)-x(1)-1)\n        .attr('y', d => y(d.rank)+5);\n\n      bars\n      .exit()\n      .transition()\n        .duration(this.tickDuration)\n        .ease(d3.easeLinear)\n        .attr('width', d => x(d.count)-x(1)-1)\n        .attr('y', d => y(this.top_n+10)+5)\n        .remove();\n  }\n\n  updateLabels(dateSlice) {\n\n    let x = this.xScale().domain([1, d3.max(dateSlice, d => d.count)]);\n    let y = this.yScale();\n\n    let labels = this.svg.selectAll('.label')\n        .data(dateSlice, d => d.audio);\n\n    labels\n      .enter()\n      .append('text')\n      .attr('class', 'label')\n      .attr('x', d => x(1)-8)\n      .attr('y', d => y(this.top_n+1)+5+((y(1)-y(0))/2))\n      .style('text-anchor', 'end')\n      .style('fill', 'whitesmoke')\n      .text(d => d.audio)\n      .transition()\n        .duration(this.tickDuration)\n        .ease(d3.easeLinear)\n        .attr('y', d => y(d.rank)+5+((y(1)-y(0))/2));\n\n    labels\n      .transition()\n      .duration(this.tickDuration)\n        .ease(d3.easeLinear)\n        .attr('x', x(1)-8)\n        .attr('y', d => y(d.rank)+5+((y(1)-y(0))/2));\n\n    labels\n      .exit()\n      .transition()\n        .duration(this.tickDuration)\n        .ease(d3.easeLinear)\n        .attr('x', d => x(1)-8)\n        .attr('y', d => y(this.top_n+10)+5)\n        .remove();\n  }\n\n  updateValueLabels (dateSlice) {\n\n    let x = this.xScale().domain([1, d3.max(dateSlice, d => d.count)]);\n    let y = this.yScale();\n\n    let valueLabel = this.svg.selectAll('.valueLabel')\n        .data(dateSlice, d => d.audio);\n\n    valueLabel\n        .enter()\n        .append('text')\n        .attr('class', 'valueLabel')\n        .attr('x', d => x(d.count)+5)\n        .attr('y', d => y(d.rank)+5+((y(1)-y(0))/2)+1)\n        .style('fill', 'whitesmoke')\n        .transition()\n        .duration(this.tickDuration)\n        .tween(\"textTween\", function (d) {\n          var i = d3.interpolate(this.textContent, d.count);\n              return function(t) {\n                // t is the percent completion of the transition\n                this.textContent = Math.round(i(t));\n              }\n        });\n\n    valueLabel\n      .transition()\n      .duration(this.tickDuration)\n      .ease(d3.easeLinear)\n      .attr('x', d => x(d.count)+5)\n      .attr('y', d => y(d.rank)+5+((y(1)-y(0))/2)+1)\n      .tween(\"textTween\", function (d) {\n        var i = d3.interpolate(this.textContent, d.count);\n            return function(t) {\n              // t is the percent completion of the transition\n              this.textContent = Math.round(i(t));\n            }\n      });\n\n    valueLabel\n      .exit()\n      .transition()\n      .duration(this.tickDuration)\n      .ease(d3.easeLinear)\n      .attr('x', d => x(d.count)+5)\n      .attr('y', d => y(this.top_n+10)+5)\n      .tween(\"textTween\", function (d) {\n        var i = d3.interpolate(this.textContent, d.count);\n            return function(t) {\n              // t is the percent completion of the transition\n              this.textContent = Math.round(i(t));\n            }\n      });\n\n  }\n\n  binarySearch(arr, date) {\n    let lower = 0, higher = arr.length - 1;\n\n    if(arr[lower].release_date > date) {\n      return 0;\n    }\n    if(arr[higher].release_date <= date) {\n      return arr[higher].count;\n    }\n\n    while(lower <= higher) {\n      const mid = Math.floor((lower + higher) / 2);\n      const midDate = arr[mid].release_date;\n      if(midDate == date) {\n        return arr[mid].count;\n      }\n      else if(midDate > date) {\n        higher = mid - 1;\n      }\n      else {\n        lower = mid + 1;\n      }\n    }\n    return arr[lower - 1].count;\n  }\n\n  updateData() {\n    const date = this.ini_date.getTime();\n    let dateSlice = Object.entries(this.currentData).map(([audio, entries]) => ({\n        audio: audio,\n        count: this.binarySearch(entries, date)\n      }))\n      .sort((a,b) => b.count - a.count)\n      .slice(0, this.top_n);\n      dateSlice.forEach((d,i) => d.rank = i);\n\n    let x = this.xScale().domain([1, d3.max(dateSlice, d => d.count)]);\n\n    if (dateSlice.length > 0) {\n      this.updateBars(dateSlice) ;\n      this.updateLabels(dateSlice) ;\n      this.updateValueLabels(dateSlice) ;\n    }\n\n    this.ini_date = new Date(this.ini_date.setDate(this.ini_date.getDate() + 1));\n  }\n\n  setup() {\n    this.width = 2000;\n    this.height = 960;\n    this.margin = {top: 50, right: 40, bottom: 30, left: 125};\n    this.svg.attr('viewBox', `0 0 ${this.width} ${this.height}`);\n\n    this.ini_date = new Date('2015-04-14');\n    this.top_n= 10;\n\n    this.tickDuration = 200;\n    this.barPadding= (this.height-(this.margin.bottom+this.margin.top))/(this.top_n*5); ;\n\n    this.svg.append('g')\n    .attr(\"height\", `translate(0, ${this.height - 50})`)\n\n    this.createXaxis();\n  }\n}\n\nfunction instantiateRacingBars(svg, data_path) {\n\n  let plot = new RacingBarsAudio(svg);\n\n  var new_data = {} ;\n\n  let MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September','October', 'November', 'December']\n  const dateFormatter = date => `${MONTHS[date.getMonth()]} ${date.getFullYear()}`;\n\n  const selector = new TimeSelector(\n    'racing-audio-time-selection',\n    [new Date('04-14-2015'), new Date('04-08-2020')],\n    function(date) {\n      plot.ini_date = date;\n      plot.updateData();\n    },\n    60000,\n    'date', dateFormatter\n\n  );\n\n  function showInitialPlot() {\n    svg.style('opacity', 0);\n    svg.transition()\n        .delay(1000)\n        .duration(600)\n        .style('opacity', 1);\n    selector.setValue('2015-04-14');\n  }\n\n  d3.csv(data_path).then(data => {\n    const country_data = {};\n\n    data.forEach(entry => {\n      const country = entry.audio;\n      if(country_data[country] === undefined) {\n        country_data[country] = [];\n      }\n      country_data[country].push({\n        count: +entry.count,\n        release_date: new Date(entry.release_date)\n      });\n    });\n\n    plot.currentData = country_data;\n\n    plot.updateData() ;\n  });\n\n}\n\n$(()=> {\n  let svg = d3.select('svg#most-languages') ;\n  let data_path = \"data/racing_audio.csv\";\n  instantiateRacingBars(svg, data_path)\n}\n)\n"]}