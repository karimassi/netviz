{"version":3,"sources":["age_rating_bar.js"],"names":["AgeRatingDistributionPlot","svgElement","_classCallCheck","this","svg","bars","yTickValues","currentData","setup","width","xSideGap","append","attr","style","text","height","tickPositionValuePairsOneSided","axis","concat","ticksX","flatMap","v","position","value","selectAll","data","ticks","tick","percentage","yAxisWidth","_this","middle_bar","VALUE_OFFSET","values","name","_","i","distanceFromMiddle","defaultBarColor","hoverBarColor","VALUE_GAP","BAR_OFFSET","getManipulableElements","selection","_groups","showBars","BAR_HEIGHT","barWidth","movieBars","forEach","movies","d3","select","shows","index","tooltipGroup","main_color","sizeX","sizeY","maxBarWidth","createXAxis","createYAxisAndBars","sideGap","createInfoTexts","transition","easeCubicOut","duration","BAR_COLOR","setupTooltip","element","handleMouseOver","createTooltip","TOOLTIP_GROUP","stats_for_year","selector","handleMouseMove","mouseY","HOVER_COLOR","tooltipText","margin","padding","toFixed","node","getBBox","textSize","on","plot","d","_d3$mouse2","_slicedToArray","mouse","SVG","_ref","y","setValue","isNaN","dataPoint","year","undefined","_this2","$","TimeSelector","updateData","csv","then","category","parseFloat","delay"],"mappings":"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","file":"age_rating_bar.js","sourcesContent":["class AgeRatingDistributionPlot {\n  constructor(svgElement) {\n    this.svg = svgElement;\n    this.bars = {};\n    this.yTickValues = ['NR', '3+', '7+', '10+', '13+', '16+', '18+'];\n    this.currentData = {};\n    this.setup();\n  }\n\n  /**\n   * Creates texts in corners (Movies/TV Shows)\n   */\n  createInfoTexts(width, xSideGap) {\n    this.svg.append('text')\n      .attr('x', xSideGap)\n      .attr('fill', '#DB0000')\n      .style('font-size', '1.6em')\n      .style('text-anchor', 'start')\n      .style('alignment-baseline', 'hanging')\n      .text('Movies');\n\n    this.svg.append('text')\n      .attr('x', width - xSideGap)\n      .attr('fill', '#DB0000')\n      .style('font-size', '1.6em')\n      .style('text-anchor', 'end')\n      .style('alignment-baseline', 'hanging')\n      .text('TV Shows');\n  }\n\n  /**\n   * Creates X axis and sets its ticks\n   */\n  createXAxis(width, height, tickPositionValuePairsOneSided) {\n    const axis = this.svg.append('g')\n      .attr('width', width)\n      .attr('transform', `translate(0, ${height - 50})`);\n\n    axis.append('line')\n      .attr('stroke', 'whitesmoke')\n      .attr('x1', 0)\n      .attr('y1', 0)\n      .attr('x2', width)\n      .attr('y2', 0);\n\n    const ticksX = tickPositionValuePairsOneSided.flatMap(v =>\n      [{\n        position: v[0],\n        value: v[1]\n      }, {\n        position: width - v[0],\n        value: v[1]\n      }]);\n    const ticks = axis.selectAll('.plot-tick')\n      .data(ticksX)\n      .enter();\n\n    ticks.append('line')\n      .attr('stroke', 'whitesmoke')\n      .attr('x1', tick => tick.position)\n      .attr('y1', 0)\n      .attr('x2', tick => tick.position)\n      .attr('y2', 5);\n\n    ticks.append('text')\n      .attr('fill', 'whitesmoke')\n      .attr('y', 10)\n      .attr('x', tick => tick.position)\n      .style('text-anchor', 'middle')\n      .style('alignment-baseline', 'hanging')\n      .text(tick => tick.value + '%');\n  }\n\n  /**\n   * Returns the size of bar depending on percentage\n   */\n  barWidth(percentage) {\n    return percentage * this.maxBarWidth;\n  }\n\n  /**\n   * Creates text values on Y axis in the middle of the plot, as well as\n   *  corresponding bars for each\n   */\n  createYAxisAndBars(width, height, yAxisWidth) {\n    const middle_bar = this.svg.append('g')\n      .attr('width', yAxisWidth)\n      .attr('transform', `translate(${width / 2}, ${height - 50})`);\n\n    const BAR_HEIGHT = 40;\n    const BAR_OFFSET = 32;\n    const VALUE_GAP = 60;\n    const VALUE_OFFSET = 30;\n\n    const values = middle_bar.selectAll('.middle-bar-value')\n      .data(this.yTickValues)\n      .enter();\n    values.append('text')\n      .attr('fill', 'whitesmoke')\n      .attr('x', 0)\n      .attr('y', (_, i) => -(VALUE_OFFSET + VALUE_GAP * i))\n      .style('text-anchor', 'middle')\n      .style('alignment-baseline', 'ideographic')\n      .text(name => name);\n\n    const distanceFromMiddle = this.yAxisWidth / 2;\n\n    this.defaultBarColor = '#DB0000';\n    this.hoverBarColor = '#800000';\n\n    const showBars = values.append('rect')\n      .attr('fill', this.defaultBarColor)\n      .attr('y', (_, i) => -(VALUE_OFFSET + VALUE_GAP * i + BAR_OFFSET))\n      .attr('x', distanceFromMiddle)\n      .attr('height', BAR_HEIGHT)\n      .attr('width', this.barWidth(0));\n\n    const movieBars = values.append('rect')\n      .attr('fill', this.defaultBarColor)\n      .attr('y', (_, i) => -(VALUE_OFFSET + VALUE_GAP * i + BAR_OFFSET))\n      .attr('x', point => -(distanceFromMiddle + this.barWidth(0)))\n      .attr('height', BAR_HEIGHT)\n      .attr('width', this.barWidth(0));\n\n    const getManipulableElements = selection => selection._groups[0];\n    this.yTickValues.forEach((value, index) => {\n      this.bars[value] = {\n        movies: d3.select(getManipulableElements(movieBars)[index]),\n        shows: d3.select(getManipulableElements(showBars)[index])\n      }\n    });\n  }\n\n  /**\n   * Creates the box that appears when a bar is hovered\n   */\n  createTooltip() {\n    const tooltipGroup = this.svg.append('g')\n      .attr('id', 'age-rating-distribution-tooltip')\n      .style('alignment-baseline', 'baseline')\n      .style('visiblity', 'hidden');\n    const tooltipBox = tooltipGroup.append('rect')\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('fill', 'whitesmoke')\n      .attr('rx', 4);\n    const tooltipText = tooltipGroup\n      .append('text')\n      .attr('fill', 'black')\n      .style('alignment-baseline', 'hanging')\n      .style('text-anchor', 'start')\n      .text('');\n  }\n\n  /**\n   * Creates GUI and sets the initial state of the plot\n   */\n  setup() {\n    const main_color = 'whitesmoke';\n    let [sizeX, sizeY] = [800, 530];\n    this.svg.attr('viewBox', `0 0 ${sizeX} ${sizeY}`);\n\n    this.yAxisWidth = 50;\n    this.maxBarWidth = (sizeX - this.yAxisWidth) / 2 - 30;\n\n    this.createXAxis(sizeX, sizeY, [\n      [(sizeX - this.yAxisWidth) / 2 - this.maxBarWidth, 100],\n      [(sizeX - this.yAxisWidth) / 2, 0]\n    ]);\n\n    this.createYAxisAndBars(sizeX, sizeY);\n\n    const sideGap = (sizeX - this.yAxisWidth) / 2 - this.maxBarWidth;\n    this.createInfoTexts(sizeX, sideGap);\n\n    this.createTooltip();\n  }\n\n  /**\n   * Updates size of elements depending on the received data and\n   *  changes event functions of the tooltip to match the new data\n   */\n  updateData(data) {\n    this.currentData = data;\n    const distanceFromMiddle = this.yAxisWidth / 2;\n    const transition = d3.transition(d3.easeCubicOut).duration(1000);\n\n    const BAR_COLOR = this.defaultBarColor;\n    const HOVER_COLOR = this.hoverBarColor;\n    const SVG = this.svg;\n    const TOOLTIP_GROUP = d3.select('#age-rating-distribution-tooltip');\n\n    const setupTooltip = function(element, data) {\n      const handleMouseOver = function(d) {\n        d3.select(this)\n          .transition()\n          .duration(500)\n          .attr('fill', HOVER_COLOR);\n        const tooltipText = TOOLTIP_GROUP.select('text');\n        const padding = {\n          x: 10,\n          y: 10\n        };\n        tooltipText\n          .attr('x', padding.x)\n          .attr('y', padding.y)\n          .text((data * 100).toFixed(1) + '%');\n        const textSize = tooltipText.node().getBBox();\n        TOOLTIP_GROUP.select('rect')\n          .attr('width', textSize.width + 2 * padding.x)\n          .attr('height', textSize.height + 2 * padding.y);\n        TOOLTIP_GROUP\n          .style('visibility', 'visible');\n      };\n\n      const handleMouseOut = function(d) {\n        d3.select(this)\n          .transition()\n          .duration(500)\n          .attr('fill', BAR_COLOR);\n        const tooltipText = TOOLTIP_GROUP.select('text');\n        tooltipText\n          .text('');\n        TOOLTIP_GROUP\n          .style('visibility', 'hidden');\n      };\n      const handleMouseMove = function(d) {\n        const [mouseX, mouseY] = d3.mouse(SVG.node());\n        const margin = {\n          x: 2,\n          y: 2\n        };\n        const tooltipBox = TOOLTIP_GROUP.select('rect');\n        const [x, y] = [\n          mouseX + margin.x,\n          mouseY - tooltipBox.node().getBBox().height - margin.y];\n        TOOLTIP_GROUP.attr('transform', `translate(${x}, ${y})`);\n      };\n\n      element\n        .on('mouseover', handleMouseOver)\n        .on('mousemove', handleMouseMove)\n        .on('mouseout', handleMouseOut);\n    }\n\n    this.yTickValues.forEach(value => {\n      if(isNaN(data[value].movies)) {\n        data[value].movies = 0;\n      }\n      if(isNaN(data[value].shows)) {\n        data[value].shows = 0;\n      }\n      setupTooltip(this.bars[value].movies, data[value].movies);\n      this.bars[value].movies\n        .transition(transition)\n        .attr('x', -(distanceFromMiddle + this.barWidth(data[value].movies)))\n        .attr('width', this.barWidth(data[value].movies));\n\n      setupTooltip(this.bars[value].shows, data[value].shows);\n      this.bars[value].shows\n        .transition(transition)\n        .attr('width', this.barWidth(data[value].shows));\n    });\n  }\n}\n\n$(() => {\n  const svg = d3.select('svg#age-rating-distribution-plot')\n  const plot =  new AgeRatingDistributionPlot(svg);\n\n  const stats_for_year = {};\n\n  const selector = new TimeSelector(\n    'content-time-selection',\n    [2015, 2021],\n    year => plot.updateData(stats_for_year[year]),\n    10000,\n    'int'\n  );\n\n  function showInitialPlot() {\n    svg.style('opacity', 0);\n    svg.transition()\n      .delay(1000)\n      .duration(600)\n      .style('opacity', 1);\n    selector.setValue(2015);\n  }\n\n  d3.csv('data/age_rating_per_year_distribution.csv')\n    .then(data => {\n      data.forEach(dataPoint => {\n        if(stats_for_year[dataPoint.year] === undefined) {\n          stats_for_year[dataPoint.year] = {};\n        }\n        if(stats_for_year[dataPoint.year][dataPoint['age rating']] === undefined) {\n          stats_for_year[dataPoint.year][dataPoint['age rating']] = {};\n        }\n        stats_for_year[dataPoint.year][dataPoint['age rating']][dataPoint.category] = parseFloat(dataPoint.percentage)\n      });\n\n      showInitialPlot();\n    });\n\n\n});\n"]}