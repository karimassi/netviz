{"version":3,"sources":["simple-bar-plot.js"],"names":["arrayEquals","a","b","Array","isArray","length","every","val","index","SimpleBarPlot","id","initialLabels","width","arguments","undefined","height","barWidth","_classCallCheck","this","svg","d3","select","concat","availableHeight","bars","barTexts","setup","initialized","labels","transition","duration","i","slice","t","style","text","data","max","_iterator","s","_step","n","done","value","Math","labelTexts","scaling","scaleLinear","domain","range","_this","attr","tween","textObj","scale","round","_loop","sizeY","sizeX","BAR_MARGIN","BAR_WIDTH","group","append","selectAll","enter","d","barCenter","hMargin","_groups","map","x"],"mappings":"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","file":"simple-bar-plot.js","sourcesContent":["/**\n * Element wise array equality check\n */\nfunction arrayEquals(a, b) {\n  return Array.isArray(a) &&\n    Array.isArray(b) &&\n    a.length === b.length &&\n    a.every((val, index) => val === b[index]);\n}\n\nclass SimpleBarPlot {\n  constructor(id, initialLabels, width=600, height=400, barWidth=100) {\n    this.id = id;\n    this.svg = d3.select(`svg#${id}`);\n    this.availableHeight = undefined;\n    this.bars = undefined;\n    this.barTexts = undefined;\n    this.labels = undefined;\n    this.initialized = false;\n    this.setup(width, height, initialLabels, barWidth);\n  }\n\n  /**\n   * Updates the text of the labels under the bars to the given values.\n   *  It is assumed that the number of passed labels is equal to the number of\n   *  texts that hold them.\n   */\n  updateLabels(labels) {\n    if(!this.initialized || arrayEquals(this.labels, labels)) {\n      return;\n    }\n\n    const t = d3.transition().duration(300);\n    for(let i = 0; i < this.labelTexts.length; i++) {\n\n      if(labels[i].length > 13) {\n        labels[i] = labels[i].slice(0, 13) + '...';\n      }\n      this.labelTexts[i]\n        .transition(t)\n        .style('opacity', 0)\n        .transition()\n        .text(labels[i])\n        .transition(t)\n        .style('opacity', 1);\n    }\n    this.labels = labels;\n  }\n\n  /**\n   * Updates the size of the bars and the values of the labels indicating the size of the\n   *  bars to match the given data. It is assumed that the number of passed data instances\n   *  is equal to the number of bars.\n   */\n  updateData(data) {\n    if(!this.initialized) {\n      return;\n    }\n\n    let max = 1;\n    for(const n of data) {\n      max = Math.max(max, n);\n    }\n    const scaling = d3.scaleLinear()\n      .domain([0, max])\n      .range([0, this.availableHeight]);\n\n    for(let i = 0; i < data.length; i++) {\n\n      const height = scaling(data[i])\n      const t = d3.transition()\n        .duration(1000);\n      this.bars[i]\n        .transition(t)\n        .attr('y', -height)\n        .attr('height', height);\n\n      this.barTexts[i]\n        .transition(t)\n        .attr('transform', `translate(0 ${-height})`)\n        .tween('text', () => {\n          const textObj = this.barTexts[i];\n          const scale = d3.scaleLinear()\n            .domain([0, 1])\n            .range([+textObj.text(), data[i]]);\n          return t => {\n            textObj.text(Math.round(scale(t)));\n          }\n        });\n    }\n  }\n\n  /**\n   * Creates GUI elements of the plot\n   */\n  setup(width, height, labels, barWidth) {\n    const hMargin = 50;\n    const [sizeX, sizeY] = [width, height];\n    this.svg.attr('viewBox', `0 0 ${sizeX} ${sizeY}`);\n\n    this.availableHeight = sizeY - 80;\n\n    const group = this.svg.append('g')\n      .attr('transform', `translate(0 ${sizeY - 40})`);\n\n    const n = labels.length;\n    const BAR_WIDTH = barWidth;\n    const BAR_MARGIN = (sizeX - 2 * hMargin - n * BAR_WIDTH) / n;\n\n    const barCenter = i => hMargin + (.5 + i) * (BAR_MARGIN + BAR_WIDTH);\n\n    const primaryColor = '#DB0000';\n\n    const bars = group.selectAll('rect.simple-plot-bars')\n      .data(labels)\n      .enter()\n      .append('rect')\n        .attr('fill', primaryColor)\n        .attr('x', (d, i) => barCenter(i) - .5 * BAR_WIDTH)\n        .attr('y', 0)\n        .attr('width', BAR_WIDTH)\n        .attr('height', 0)\n        .attr('class', 'simple-plot-bars');\n\n    const barTexts = group.selectAll('text.bar-text')\n      .data(labels)\n      .enter()\n      .append('text')\n        .attr('fill', 'white')\n        .attr('x', (d, i) => barCenter(i))\n        .attr('y', -13)\n        .attr('class', 'bar-text')\n        .style('font-size', '1.8em')\n        .style('user-select', 'none')\n        .style('text-anchor', 'middle')\n        .text('0');\n\n    this.bars = bars._groups[0].map(x => d3.select(x));\n    this.barTexts = barTexts._groups[0].map(x => d3.select(x));\n\n    group.append('line')\n      .attr('x1', hMargin)\n      .attr('x2', sizeX - hMargin)\n      .attr('y1', 0)\n      .attr('y2', 0)\n      .attr('class', 'simple-plot-axis')\n      .attr('stroke', 'white');\n\n    const labelTexts = group.selectAll('text.label-text-simple-plot')\n      .data(labels)\n      .enter()\n      .append('text')\n        .attr('fill', 'white')\n        .attr('y', 10)\n        .attr('x', (d, i) => barCenter(i))\n        .attr('class', 'label-text-simple-plot')\n        .style('font-size', '2em')\n        .style('user-select', 'none')\n        .style('text-anchor', 'middle')\n        .style('alignment-baseline', 'hanging')\n        .text(d => d);\n    this.labelTexts = labelTexts._groups[0].map(x => d3.select(x));\n\n    this.initialized = true;\n  }\n}\n"]}