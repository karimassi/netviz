{"version":3,"sources":["simple-bar-plot.js"],"names":["arrayEquals","a","b","Array","isArray","length","every","val","index","SimpleBarPlot","id","initialLabels","width","arguments","undefined","height","barWidth","_classCallCheck","this","svg","d3","select","concat","availableHeight","bars","barTexts","setup","labels","transition","duration","i","labelTexts","slice","initialized","t","style","data","max","_iterator","s","_step","n","done","value","scaling","scaleLinear","domain","range","_this","attr","tween","textObj","scale","text","Math","round","_loop","sizeX","sizeY","barCenter","BAR_MARGIN","BAR_WIDTH","group","selectAll","enter","append","d","hMargin","map","x","_groups"],"mappings":"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","file":"simple-bar-plot.js","sourcesContent":["function arrayEquals(a, b) {\n  return Array.isArray(a) &&\n    Array.isArray(b) &&\n    a.length === b.length &&\n    a.every((val, index) => val === b[index]);\n}\n\nclass SimpleBarPlot {\n  constructor(id, initialLabels, width=600, height=400, barWidth=100) {\n    this.id = id;\n    this.svg = d3.select(`svg#${id}`);\n    this.availableHeight = undefined;\n    this.bars = undefined;\n    this.barTexts = undefined;\n    this.labels = undefined;\n    this.initialized = false;\n    this.setup(width, height, initialLabels, barWidth);\n  }\n\n  updateLabels(labels) {\n    if(!this.initialized || arrayEquals(this.labels, labels)) {\n      return;\n    }\n\n    const t = d3.transition().duration(300);\n    for(let i = 0; i < this.labelTexts.length; i++) {\n\n      if(labels[i].length > 13) {\n        labels[i] = labels[i].slice(0, 13) + '...';\n      }\n      this.labelTexts[i]\n        .transition(t)\n        .style('opacity', 0)\n        .transition()\n        .text(labels[i])\n        .transition(t)\n        .style('opacity', 1);\n    }\n    this.labels = labels;\n  }\n\n  updateData(data) {\n    if(!this.initialized) {\n      return;\n    }\n\n    let max = 1;\n    for(const n of data) {\n      max = Math.max(max, n);\n    }\n    const scaling = d3.scaleLinear()\n      .domain([0, max])\n      .range([0, this.availableHeight]);\n\n    for(let i = 0; i < data.length; i++) {\n\n      const height = scaling(data[i])\n      const t = d3.transition()\n        .duration(1000);\n      this.bars[i]\n        .transition(t)\n        .attr('y', -height)\n        .attr('height', height);\n\n      this.barTexts[i]\n        .transition(t)\n        .attr('transform', `translate(0 ${-height})`)\n        .tween('text', () => {\n          const textObj = this.barTexts[i];\n          const scale = d3.scaleLinear()\n            .domain([0, 1])\n            .range([+textObj.text(), data[i]]);\n          return t => {\n            textObj.text(Math.round(scale(t)));\n          }\n        });\n    }\n  }\n\n  setup(width, height, labels, barWidth) {\n    const hMargin = 50;\n    const [sizeX, sizeY] = [width, height];\n    this.svg.attr('viewBox', `0 0 ${sizeX} ${sizeY}`);\n\n    this.availableHeight = sizeY - 80;\n\n    const group = this.svg.append('g')\n      .attr('transform', `translate(0 ${sizeY - 40})`);\n\n    const n = labels.length;\n    const BAR_WIDTH = barWidth;\n    const BAR_MARGIN = (sizeX - 2 * hMargin - n * BAR_WIDTH) / n;\n\n    const barCenter = i => hMargin + (.5 + i) * (BAR_MARGIN + BAR_WIDTH);\n\n    const primaryColor = '#DB0000';\n\n    const bars = group.selectAll('rect.simple-plot-bars')\n      .data(labels)\n      .enter()\n      .append('rect')\n        .attr('fill', primaryColor)\n        .attr('x', (d, i) => barCenter(i) - .5 * BAR_WIDTH)\n        .attr('y', 0)\n        .attr('width', BAR_WIDTH)\n        .attr('height', 0)\n        .attr('class', 'simple-plot-bars');\n\n    const barTexts = group.selectAll('text.bar-text')\n      .data(labels)\n      .enter()\n      .append('text')\n        .attr('fill', 'white')\n        .attr('x', (d, i) => barCenter(i))\n        .attr('y', -13)\n        .attr('class', 'bar-text')\n        .style('font-size', '1.8em')\n        .style('user-select', 'none')\n        .style('text-anchor', 'middle')\n        .text('0');\n\n    this.bars = bars._groups[0].map(x => d3.select(x));\n    this.barTexts = barTexts._groups[0].map(x => d3.select(x));\n\n    group.append('line')\n      .attr('x1', hMargin)\n      .attr('x2', sizeX - hMargin)\n      .attr('y1', 0)\n      .attr('y2', 0)\n      .attr('class', 'simple-plot-axis')\n      .attr('stroke', 'white');\n\n    const labelTexts = group.selectAll('text.label-text-simple-plot')\n      .data(labels)\n      .enter()\n      .append('text')\n        .attr('fill', 'white')\n        .attr('y', 10)\n        .attr('x', (d, i) => barCenter(i))\n        .attr('class', 'label-text-simple-plot')\n        .style('font-size', '2em')\n        .style('user-select', 'none')\n        .style('text-anchor', 'middle')\n        .style('alignment-baseline', 'hanging')\n        .text(d => d);\n    this.labelTexts = labelTexts._groups[0].map(x => d3.select(x));\n\n    this.initialized = true;\n  }\n}\n"]}