{"version":3,"sources":["media_player_time_selection.js"],"names":["TICKS_PER_SECOND","TimeSelector","id","interval","onPercentageSelectedCallback","traverseTime","scalingType","dataFormatter","_classCallCheck","this","baseEl","d3","select","concat","dragging","increasePerTick","scaling","scaleTime","domain","range","scaleLinear","rangeRound","console","totalTicks","lastEmit","undefined","oldPercentage","percentage","setPercentage","emitPercentage","size","maxBarWidth","createGUI","attr","isPlaying","selectionText","text","createText","value","updateVisually","arguments","length","Math","max","min","plotBar","_d3$mouse2","_slicedToArray","mouse","node","mouseX","setVisualPercentage","log","Date","getTime","invokeCallback","invert","current","getDisplayableValue","_this","displayCorrectControlIcon","playLoop","loopTick","clearInterval","increasePercentage","pause","play","controlButton","getMousePercentage","_this2","rowDiv","append","controlButtonDiv","style","on","handleControlButtonClick","svgSize","barSvg","barGroup","handleDragStart","plotHandle","handleDragOver","handleDragMove","BAR_HEIGHT","plotDesc","barDiv","html","y"],"mappings":"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","file":"media_player_time_selection.js","sourcesContent":["const TICKS_PER_SECOND = 30;\n\nclass TimeSelector {\n  /**\n   * Creates media player like time selector. Parameters of the constructor are\n   * the following:\n   *  - id: id of the div where time selector should be placed\n   *  - interval: two element array indicating min and max value of the interval\n   *  - onPercentageSelectedCallback: function of a single parameter that is\n   *      when a new is selected or during automatic playing\n   *  - traverseTime: time in milliseconds that should take automatic playing\n   *      to go from beginning to end. This is used to calculate the speed of\n   *      movement and the whole sequence may take more or less time than indicated.\n   *  - scalingType: type of interval (supported: date, int, float)\n   *  - dataFormatter: function that maps object to string. If the function\n   *      is not specified default javascript's 'toString' will we invoced\n   */\n  constructor(id, interval, onPercentageSelectedCallback,\n      traverseTime, scalingType, dataFormatter) {\n    this.baseEl = d3.select(`#${id}`);\n    this.id = id;\n    this.dragging = false;\n    this.interval = interval;\n    this.onPercentageSelectedCallback = onPercentageSelectedCallback;\n    this.dataFormatter = dataFormatter;\n    this.scalingType = scalingType;\n    const totalTicks = traverseTime / 1000 * TICKS_PER_SECOND;\n    this.increasePerTick = 1 / totalTicks;\n    switch(this.scalingType) {\n      case 'date':\n        this.scaling = d3.scaleTime()\n          .domain([0, 1])\n          .range(interval);\n        break;\n      case 'int':\n        this.scaling = d3.scaleLinear()\n          .domain([0, 1])\n          .rangeRound(interval);\n        break;\n      case 'float':\n        this.scaling = d3.scaleLinear()\n          .domain([0, 1])\n          .range(interval);\n        break;\n      default:\n        console.log('Unsupported scaling type!');\n    }\n    this.createGUI();\n    this.isPlaying = false;\n    this.lastEmit = undefined;\n  }\n\n  /**\n   * Increase percentage by a value of a tick and update it visually if\n   *  user is not dragging the bar.\n   */\n  increasePercentage() {\n    const oldPercentage = this.percentage;\n    this.setPercentage(oldPercentage + this.increasePerTick, !this.dragging);\n    this.emitPercentage(this.percentage);\n  }\n\n  /**\n   * Sets size and position of play bar and play handle to match percentage\n   */\n  setVisualPercentage(percentage) {\n    const size = percentage * this.maxBarWidth;\n    this.plotHandle.attr('cx', size);\n    this.plotBar.attr('width', size);\n    const value = this.scaling(percentage);\n    this.selectionText.text(this.createText(value));\n  }\n\n  /**\n   * Sets percentage while at the same time being cautious of its domain\n   *  and does visual update depending on the value of parameter updateVisually\n   */\n  setPercentage(percentage, updateVisually=true) {\n    percentage = Math.max(0, Math.min(1, percentage));\n    this.percentage = percentage;\n    if(updateVisually) {\n      this.setVisualPercentage(percentage);\n    }\n  }\n\n  /**\n   * Maps value to string properly depending on scalingType\n   */\n  getDisplayableValue(value) {\n    if(this.dataFormatter !== undefined){\n      return this.dataFormatter(value);\n    }\n    else {\n      return value + '';\n    }\n  }\n\n  /**\n   * Gets mouse position relative to the bar and translates it into percentage\n   */\n  getMousePercentage() {\n    const [mouseX, _] = d3.mouse(this.plotBar.node());\n    const percentage = Math.max(0, Math.min(1, mouseX / this.maxBarWidth));\n    return percentage;\n  }\n\n  /**\n   *  Calls the callback and puts the value aside so it can check later not to\n   *    call the callback with the same value\n   */\n  invokeCallback(value) {\n    if(value != this.lastEmit) {\n      this.onPercentageSelectedCallback(value);\n    }\n    else {\n      console.log('Same', this.lastEmit);\n    }\n    switch(this.scalingType) {\n      case 'date':\n        this.lastEmit = new Date(value.getTime());\n        break;\n      default:\n        this.lastEmit = value;\n    }\n\n  }\n\n  /**\n  * Get proper value depending on percentage and calls invokeCallback to take\n  *   care of notifying application\n  */\n  emitPercentage(percentage) {\n    const value = this.scaling(percentage);\n    this.invokeCallback(value);\n  }\n\n  /**\n   * Sets percentage to point to given value and invokes the callback\n   */\n  setValue(value) {\n    const percentage = this.scaling.invert(value);\n    if(percentage >= 0 && percentage <= 1) {\n      this.setPercentage(percentage, true);\n      this.invokeCallback(value);\n    }\n  }\n\n  /**\n   *  Formats the text that is displayed under the bar, for the given value\n   *    passed as current\n   */\n  createText(current) {\n    return `${this.getDisplayableValue(current)} / ${this.getDisplayableValue(this.interval[1])}`;\n  }\n\n  /**\n   * Starts playing transition automatically\n   */\n  play() {\n    this.isPlaying = true;\n    this.displayCorrectControlIcon();\n    this.playLoop = setInterval(() => this.loopTick(), 1000 / TICKS_PER_SECOND);\n  }\n\n  /**\n   * Stops playing automatic transition\n   */\n  pause() {\n    this.isPlaying = false;\n    this.displayCorrectControlIcon();\n    clearInterval(this.playLoop);\n  }\n\n  /**\n   * Does a single tick of automatic transition\n   */\n  loopTick() {\n    this.increasePercentage();\n    if(this.percentage == 1) {\n      this.pause();\n    }\n  }\n\n  /**\n   * Handles play/pause button being clicked\n   */\n  handleControlButtonClick() {\n    if(this.isPlaying) {\n      this.pause();\n    }\n    else {\n      if(this.percentage == 1) {\n        this.percentage = 0;\n      }\n      this.play();\n    }\n  }\n\n  /**\n   * Display correct control button (play/pause) depending on the state of the\n   *  automatic transition\n   */\n  displayCorrectControlIcon() {\n    this.controlButton.attr('class', `bi bi-${this.isPlaying ? 'pause' : 'play'}-fill`);\n  }\n\n  /**\n   * Starts dragging mode\n   */\n  handleDragStart() {\n    this.dragging = true;\n  }\n\n  /**\n   * Sets visuals and emits data when dragging is over, also ends dragging mode\n   */\n  handleDragOver() {\n    if(this.dragging) {\n      this.dragging = false;\n      this.emitPercentage(this.getMousePercentage());\n      this.setPercentage(this.getMousePercentage());\n    }\n  }\n\n  /**\n   * Does visual update if possible during dragging of the slider\n   */\n  handleDragMove() {\n    if(this.dragging) {\n      this.setVisualPercentage(this.getMousePercentage());\n    }\n  }\n\n  /**\n   * Creates GUI elements and setups initial state\n   */\n  createGUI() {\n    const rowDiv = this.baseEl.append('div')\n      .attr('class', 'time-selector row');\n\n    const controlButtonDiv = rowDiv.append('div')\n      .attr('class', 'col-md-1 col-3 play-control my-auto');\n\n    this.controlButton = controlButtonDiv.append('i')\n      .attr('class', 'bi bi-play-fill')\n      .style('cursor', 'pointer');\n\n    this.controlButton.on('click', () => this.handleControlButtonClick());\n\n    const barDiv = rowDiv.append('div')\n      .attr('class', 'col-md-4 col-9 my-auto')\n      .style('text-align', 'left');\n\n    const svgSize = {\n      x: 500,\n      y: 100\n    };\n\n    const barSvg = barDiv.append('svg')\n      .style('width', '100%')\n      .attr('viewBox', `0 0 ${svgSize.x} ${svgSize.y}`);\n\n    const BAR_HEIGHT = 8;\n    const BAR_WIDTH = 480;\n    this.maxBarWidth = BAR_WIDTH;\n\n    const barGroup = barSvg.append('g')\n      .attr('transform',\n        `translate(${(svgSize.x - BAR_WIDTH) /2}, ${svgSize.y / 2})`);\n\n    this.percentage = 0;\n\n    const backgroundBar = barGroup.append('rect')\n      .attr('x', 0)\n      .attr('y', -BAR_HEIGHT / 2)\n      .attr('height', BAR_HEIGHT)\n      .attr('width', BAR_WIDTH)\n      .attr('fill', 'rgba(255, 255, 255, .5)')\n      .on('mousedown', () => this.handleDragStart());\n\n    this.plotBar = barGroup.append('rect')\n      .attr('x', 0)\n      .attr('y', -BAR_HEIGHT / 2)\n      .attr('height', BAR_HEIGHT)\n      .attr('width', 0)\n      .attr('fill', 'red')\n      .on('mousedown', () => this.handleDragStart());\n\n    this.plotHandle = barGroup.append('circle')\n      .attr('cx', 0)\n      .attr('cy', 0)\n      .attr('r', 9)\n      .attr('fill', 'red')\n      .style('cursor', 'pointer')\n      .on('mousedown', () => this.handleDragStart());\n\n    d3.select('body')\n      .on(`mouseup.${this.id}`, () => this.handleDragOver())\n      .on(`mousemove.${this.id}`, () => this.handleDragMove());\n\n    this.selectionText = barGroup.append('text')\n      .attr('x', 2)\n      .attr('y', BAR_HEIGHT + 10)\n      .attr('fill', 'whitesmoke')\n      .attr('font-size', '1.3em')\n      .style('alignment-baseline', 'hanging')\n      .style('text-anchor', 'start')\n      .style('user-select', 'none')\n      .text(this.createText(this.interval[0]));\n\n    const plotDesc = this.baseEl.attr('plot-description');\n    if(plotDesc !== undefined) {\n      rowDiv.append('div')\n        .attr('class', 'col-md-1 col-1 my-auto plot-description')\n        .style('text-align', 'right')\n        .html('<i class=\"bi bi-info-circle-fill\"></i>');\n      rowDiv.append('div')\n        .attr('class', 'col-md-6 col-11 my-auto plot-description')\n        .html(plotDesc);\n    }\n  }\n}\n\n// $(() => {\n//   new TimeSelector(\n//     'test-player',\n//     [new Date('04-14-2015'), new Date('05-20-2020')],\n//     console.log,\n//     10000,\n//     'date',\n//     date => `${date.getDate()}. ${date.getMonth() + 1}. ${date.getFullYear()}.`\n//   )\n// });\n"]}