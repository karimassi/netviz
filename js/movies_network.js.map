{"version":3,"sources":["movies_network.js"],"names":["$","net","Network","d3","json","then","data","build_network","self","container","nodes","edges","sigma","settings","nodesPowRatio","classes","graph","addMethod","nodeId","neighbors","k","this","allNeighborsIndex","nodesIndex","audio_to_color","Japanese","Hindi","French","Korean","Italian","German","Spanish","Mandarin","Arabic","forEach","push","id","node","label","concat","name","audio","x","y","size","color","edge","source","target","process_nodes","type","document","getElementById","doubleClickEnabled","minEdgeSize","maxEdgeSize","minNodeSize","process_edges","maxNodeSize","renderer","easing","enableNodeHovering","n","originalColor","s","e","configNoverlap","duration","toKeep","startNoverlap","bind","refresh"],"mappings":"mZAAAA,EAAE,WACD,IAAMC,EAAM,IAAIC,QAAQ,kBACxBC,GAAGC,KAAK,4BAA4BC,KAAK,SAAAC,GACxCL,EAAIM,cAAcD,O,IADhBF,Q,WACFH,SAAAA,EAAIM,GAAcD,gBAAAA,KAAAA,GAClBE,KAFDC,UAAAA,EAFDD,KAAAE,MAAA,GAOAF,KAAAG,MAAA,GAEAC,MAAAC,SAAAC,cAAA,EAQEF,MAAMG,QAAQC,MAAMC,UAAU,YAAa,SAASC,GACnD,IARGhB,EACLiB,EAAA,GACCX,IAAIY,KADkBC,KAAAC,kBAAAJ,IAAA,GAEtBV,EAAAY,GAAAC,KAAAE,WAAAH,GAGMR,OAAMC,W,2CAcb,SAAcH,GARZ,IAAAc,EAAA,CACEL,QAAAA,UADFM,SAAA,UAYAC,MAAS,UATTC,OAAOR,UACLS,OATH,UAoBCC,QARF,UASEC,OAAU,UACVC,QAAW,UACXC,SAAY,UACZC,OAAU,WAVXvB,EAAAwB,QAAIV,SAAAA,GACHhB,KAAAE,MAAAyB,KAAW,CACXC,GAAAC,EAAAD,GACAE,MAAA,GAAAC,OAAAF,EAASG,KAAT,MAAAD,OAHoBF,EAAAI,MAGpB,KACAC,EAAAL,EAAAK,EACAC,EAAAN,EAAAM,EACAC,KAAA,EACAC,MAAArB,EAAUa,EAPUI,a,2BAapBjC,SAAKE,GACJ0B,EAAAA,QAAIC,SAAAA,GACJC,KAAAA,MAAAA,KAAK,CACLI,GAAAA,EAAGL,GACHM,OAACG,EAAMC,OACPH,OAAAA,EALeI,OAMfH,KAAAA,QANeA,MAAhB,8B,2BAwBF,SAAcvC,GACbe,KAAK4B,cAbN3C,EAAAI,OACCC,KAAAA,cAAcL,EAAAK,OACbH,IAAAA,EAAAA,CAAAA,MAAAA,KAAAE,MAAgBC,MAAAH,KAAAG,OAEfoC,EAAAA,IAAAA,MAAQD,CACRE,aAAM,EACNE,MAAAA,EACAL,SAAAA,CALepC,UAAhB0C,SAAAC,eAAA5C,KAAAC,WAOAyC,KARD,UAuBCrC,SAAU,CACTwC,oBAAoB,EACpBC,YAdH,GACCC,YAAKN,EACLO,YAAKC,EACLC,YAAQ,EAAChD,YAAOF,EAAYG,oBAAYA,KAIvCK,EAAAA,eAFiB,CAGjB2C,WAAAA,GACClD,WAAAA,IACAyC,SAAAA,IAFSU,OAHO,iBAOjB/C,SAAAA,MAIC2C,EAAAA,gBAGAK,EAAAA,MAAAA,QAAAA,QAAAA,SAAoBC,GAPXA,EAAAC,cAAAD,EAAAjB,QA2BXmB,EAAEhD,MAAML,QAAQuB,QAAQ,SAAS+B,GAfjCD,EAAAA,cAAEE,EAAerB,QAIhBe,EAAAA,KAAAA,YAAQ,SAAAK,GAAkB,IAAA/C,EAAA+C,EAAA3D,KAAA+B,KAAAD,GAC1B+B,EAAQH,EAAEhD,MAAQG,UAAAD,GAkBlBkD,EAAOlD,GAAU+C,EAAE3D,KAAK+B,KAExB2B,EAAEhD,MAAMN,QAAQwB,QAAQ,SAAA4B,GAhBvBO,EAAAA,EAAAA,IAGFL,EAACnB,MAAOnC,EAAAA,cAELoD,EAFHjB,MAAA,0BAqBCmB,EAAEhD,MAAML,QAAQuB,QAAQ,SAAA+B,GAbvBK,EAAKL,EAAAlB,SAAaqB,EAAAH,EAACjB,QACpBiB,EAAApB,MAAI3B,sBAEJkD,EAAAA,MAAOlD,0BAIL4C,EAAAA,YAIDE,EAAAM,KAND,aAAA,SAAAL,GAQAD,EAAAA,MAAEhD,QAAML,QAAQuB,SAAQ4B,GACvBA,EAAAjB,MAAIuB,EAAAA,gBAGHH,EAAAA,MAAAA,QAAA/B,QAAU,SAAA+B,GACVA,EAAApB,MAAAoB,EAAAF,gBAGFC,EAAAO,kB","file":"movies_network.js","sourcesContent":["$(function() {\n\tconst net = new Network(\"movies-network\")\n\td3.json(\"data/movies_network.json\").then(data => {\n\t\tnet.build_network(data)\n\t});\n})\n\n/**\n * Builds a network plot in the given container id\n */\nclass Network {\n\tconstructor(container) {\n\t\tself.container = container;\n\t\tself.nodes = [];\n\t\tself.edges = [];\n\n        sigma.settings.nodesPowRatio = 1;\n\t\tsigma.classes.graph.addMethod('neighbors', function(nodeId) {\n\t\t\tvar k,\n\t\t\t\tneighbors = {},\n\t\t\t\tindex = this.allNeighborsIndex[nodeId] || {};\n\t\t\n\t\t\tfor (k in index)\n\t\t\t  neighbors[k] = this.nodesIndex[k];\n\t\t\n\t\t\treturn neighbors;\n\t\t  });\n\t}\n\n\t// Processes node data \n\tprocess_nodes(nodes) {\n\t\tvar audio_to_color = {\n\t\t\t'English': \"#DB0000\",\n\t\t\t'Japanese': \"#CE060B\", \n\t\t\t'Hindi': \"#623A63\",\n\t\t\t'French': \"#B31321\",\n\t\t\t'Korean': \"#A51A2C\",\n\t\t\t'Italian': \"#6F3458\",\n\t\t\t'German': \"#8A2742\", \n\t\t\t'Spanish': \"#7D2D4D\",\n\t\t\t'Mandarin': \"#982037\", \n\t\t\t'Arabic': \"#C00D16\",\n\t\t}\n\t\tnodes.forEach(node => {\n\t\t\tself.nodes.push({\n\t\t\t\tid: node.id, \n\t\t\t\tlabel: `${node.name} (${node.audio})`,\n\t\t\t\tx: node.x,\n\t\t\t\ty: node.y, \n\t\t\t\tsize: 8,\n\t\t\t\tcolor: audio_to_color[node.audio]\n\t\t\t})\n\t\t});\n\t}\n\n\t// Processes edge data\n\tprocess_edges(edges) {\n\t\tedges.forEach(edge => {\n\t\t\tself.edges.push({\n\t\t\t\tid: edge.id, \n\t\t\t\tsource: edge.source,\n\t\t\t\ttarget: edge.target,\n\t\t\t\ttype: 'curve',\n\t\t\t\tcolor: 'rgba(250,250,250,0.6)'\n\t\t\t})\n\t\t});\n\t}\n\n\tbuild_network(data) {\n\t\tthis.process_nodes(data.nodes);\n\t\tthis.process_edges(data.edges);\n\t\tlet g = {nodes: self.nodes, edges: self.edges};\n\t\t// Build initial graph\n\t\tlet s = new sigma({\n\t\t\tautoRescale : false,\n\t\t\tgraph: g,\n\t\t\trenderer: {\n\t\t\t\tcontainer: document.getElementById(self.container),\n\t\t\t\ttype: 'canvas'\n\t\t\t},\n\t\t\tsettings: {\n\t\t\t\tdoubleClickEnabled: false,\n\t\t\t\tminEdgeSize: 0.5,\n\t\t\t\tmaxEdgeSize: 4,\n\t\t\t\tminNodeSize: 0,\n\t\t\t\tmaxNodeSize: 0,\n\t\t\t\tdrawLabels: false,\n\t\t\t\tenableNodeHovering: false,\n\t\t\t}\n\t\t})\n\n\t\t// Plugin to avoid nodes overlapping \n\t\ts.configNoverlap({\n\t\t\tnodeMargin: 0.8,\n\t\t\tscaleNodes: 0.85,\n\t\t\tgridSize: 100,\n\t\t\teasing: 'quadraticInOut', // animation transition function\n\t\t\tduration: 10000   // animation duration. Long here for the purposes of this example only\n\t\t  });\n\n\t\t// Start the layout:\n\t\ts.startNoverlap();\n\n\n\t\ts.graph.nodes().forEach(function(n) {\n\t\t\tn.originalColor = n.color;\n\t\t  });\n\t\ts.graph.edges().forEach(function(e) {\n\t\t\te.originalColor = e.color;\n\t\t});\n\n\t\t// Select nodes and neighbors when selecting a node\n\t\ts.bind('clickNode', e => {\n\t\t\tvar nodeId = e.data.node.id;\n\t\t\tvar toKeep = s.graph.neighbors(nodeId);\n\t\t\ttoKeep[nodeId] = e.data.node;\n\n\t\t\ts.graph.nodes().forEach(n => {\n\t\t\t\tif (toKeep[n.id]) {\n\t\t\t\t\tn.color = n.originalColor;\n\t\t\t\t} else {\n\t\t\t\t\tn.color = 'rgba(190,190,190,0.5)';\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ts.graph.edges().forEach(e => {\n\t\t\t\tif (toKeep[e.source] && toKeep[e.target]) {\n\t\t\t\t\te.color = 'rgba(250,250,250,1)';\n\t\t\t\t} else {\n\t\t\t\t\te.color = 'rgba(170,170,170,0.5)';\n\t\t\t\t}\n\t\t\t});\n\t\t\ts.refresh();\n\t\t});\n\n\t\t// Restore original colors after deselection\n\t\ts.bind('clickStage', function(e) {\n\t\t\ts.graph.nodes().forEach(function(n) {\n\t\t\t  n.color = n.originalColor;\n\t\t\t});\n\t\n\t\t\ts.graph.edges().forEach(function(e) {\n\t\t\t  e.color = e.originalColor;\n\t\t\t});\n\t\n\t\t\ts.refresh();\n\t\t});\n\n\t}\n} "]}