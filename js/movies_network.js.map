{"version":3,"sources":["movies_network.js"],"names":["$","net","Network","d3","json","then","data","build_network","container","_classCallCheck","this","self","edges","sigma","settings","nodesPowRatio","classes","graph","addMethod","nodeId","neighbors","k","allNeighborsIndex","nodesIndex","nodes","audio_to_color","English","Hindi","French","Korean","Italian","German","Spanish","Mandarin","Arabic","forEach","push","id","node","label","concat","name","audio","x","y","size","color","edge","source","target","process_nodes","type","document","getElementById","doubleClickEnabled","minEdgeSize","maxEdgeSize","minNodeSize","process_edges","maxNodeSize","renderer","easing","enableNodeHovering","n","originalColor","s","configNoverlap","e","nodeMargin","duration","toKeep","startNoverlap","bind"],"mappings":"mZAAAA,EAAE,WACD,IAAMC,EAAM,IAAIC,QAAQ,kBACxBC,GAAGC,KAAK,4BAA4BC,KAAK,SAAAC,GACxCL,EAAIM,cAAcD,O,IAIdJ,Q,WAPL,SAAAA,EAACM,GAAWC,gBAAAC,KAAAR,GACZS,KAAMV,UAAUC,EAChBC,KAAGC,MAAK,GACPH,KAAGW,MAACL,GAHNM,MAAAC,SAAAC,cAAA,EAcEF,MAAMG,QAAQC,MAAMC,UAAU,YAAa,SAASC,GACnD,IARGjB,EACLkB,EAAA,GACCT,IAAIU,KADkBX,KAAAY,kBAAAH,IAAA,GAEtBR,EAAAU,GAAAX,KAAAa,WAAAF,GAGMR,OAAMC,W,2CAEX,SAEMU,GAUP,IAAIC,EAAiB,CARpBC,QAAA,UACEN,SAAAA,UADFO,MAAA,UAYAC,OAAU,UATVC,OAAOT,UACLU,QATH,UAUAC,OAAA,UAWCC,QAAW,UACXC,SAAY,UACZC,OAAU,WAVXV,EAAAW,QAAIV,SAAAA,GACHd,KAAAa,MAAAY,KAAW,CACXC,GAAAC,EAAAD,GACAE,MAAA,GAAAC,OAAAF,EAASG,KAAT,MAAAD,OAHoBF,EAAAI,MAGpB,KACAC,EAAAL,EAAAK,EACAC,EAAAN,EAAAM,EACAC,KAAA,EACAC,MAAArB,EAAUa,EAPUI,a,2BAYrBlB,SAAMW,GACLxB,EAAAA,QAAKa,SAAAA,GACJa,KAAAA,MAAIC,KAAKD,CACTE,GAAAA,EAAAA,GACAI,OAACI,EAAMC,OACPJ,OAACG,EAAME,OACPJ,KAAAA,QACAC,MAAAA,8B,2BAiBH,SAAcxC,GACbI,KAAKwC,cAbN5C,EAAAkB,OACCZ,KAAAA,cAAcN,EAAAM,OACbD,IAAAA,EAAAA,CAAAA,MAAAA,KAAAa,MAAgBZ,MAAAD,KAAAC,OAEfoC,EAAAA,IAAAA,MAAQD,CACRE,aAAM,EACNE,MAAAA,EACAL,SAAAA,CALetC,UAAhB4C,SAAAC,eAAA1C,KAAAH,WAOA2C,KARD,UAuBCrC,SAAU,CACTwC,oBAAoB,EACpBC,YAdH,GACCC,YAAKN,EACLO,YAAKC,EACLC,YAAQ,EAACnC,YAAOb,EAAYC,oBAAYA,KAIvCK,EAAAA,eAFiB,CAGjB2C,WAAAA,GACCpD,WAAAA,IACA2C,SAAAA,IAFSU,OAHO,iBAOjB/C,SAAAA,MAIC2C,EAAAA,gBAGAK,EAAAA,MAAAA,QAAAA,QAAAA,SAAoBC,GAPXA,EAAAC,cAAAD,EAAAjB,QAWXmB,EAAAA,MAAEC,QAAAA,QAAe,SAAAC,GAChBC,EAAAA,cAAYD,EADIrB,QAIhBe,EAAAA,KAAAA,YAAQ,SAAAM,GAAkB,IAAAhD,EAAAgD,EAAA7D,KAAAgC,KAAAD,GAC1BgC,EAAQJ,EAAEhD,MAAQG,UAAAD,GAiBlBmD,EAAOnD,GAAUgD,EAAE7D,KAAKgC,KAExB2B,EAAEhD,MAAMO,QAAQW,QAAQ,SAAA4B,GAfvBQ,EAAAA,EAAAA,IAGFN,EAACnB,MAAOtB,EAAAA,cAELuC,EAFHjB,MAAA,0BAOAmB,EAAAA,MAAEO,QAAKrC,QAAa,SAAAgC,GACnBG,EAAInD,EAAAA,SAAgBmB,EAApB6B,EAAAlB,QACAkB,EAAArB,MAAIwB,sBAGJL,EAAAA,MAAA,0BAQAA,EAAAA,YAGEA,EAAAO,KAAA,aAAM,SAAAL,GACNA,EAAAA,MAAAA,QAAAhC,QAAU,SAAA4B,GACVA,EAAAjB,MAAAiB,EAAAC,gBAKFC,EAAAhD,MAAAL,QAAAuB,QAAA,SAAAgC,GAUEA,EAAErB,MAAQqB,EAAEH,gBALdC,EAAAA,kB","file":"movies_network.js","sourcesContent":["$(function() {\n\tconst net = new Network(\"movies-network\")\n\td3.json(\"data/movies_network.json\").then(data => {\n\t\tnet.build_network(data)\n\t});\n})\n\nclass Network {\n\tconstructor(container) {\n\t\tself.container = container;\n\t\tself.nodes = [];\n\t\tself.edges = [];\n\n        sigma.settings.nodesPowRatio = 1;\n\t\tsigma.classes.graph.addMethod('neighbors', function(nodeId) {\n\t\t\tvar k,\n\t\t\t\tneighbors = {},\n\t\t\t\tindex = this.allNeighborsIndex[nodeId] || {};\n\t\t\n\t\t\tfor (k in index)\n\t\t\t  neighbors[k] = this.nodesIndex[k];\n\t\t\n\t\t\treturn neighbors;\n\t\t  });\n\t}\n\n\tprocess_nodes(nodes) {\n\t\tvar audio_to_color = {\n\t\t\t'English': \"#DB0000\",\n\t\t\t'Japanese': \"#CE060B\", \n\t\t\t'Hindi': \"#623A63\",\n\t\t\t'French': \"#B31321\",\n\t\t\t'Korean': \"#A51A2C\",\n\t\t\t'Italian': \"#6F3458\",\n\t\t\t'German': \"#8A2742\", \n\t\t\t'Spanish': \"#7D2D4D\",\n\t\t\t'Mandarin': \"#982037\", \n\t\t\t'Arabic': \"#C00D16\",\n\t\t}\n\t\tnodes.forEach(node => {\n\t\t\tself.nodes.push({\n\t\t\t\tid: node.id, \n\t\t\t\tlabel: `${node.name} (${node.audio})`,\n\t\t\t\tx: node.x,\n\t\t\t\ty: node.y, \n\t\t\t\tsize: 8,\n\t\t\t\tcolor: audio_to_color[node.audio]\n\t\t\t})\n\t\t});\n\t}\n\n\tprocess_edges(edges) {\n\t\tedges.forEach(edge => {\n\t\t\tself.edges.push({\n\t\t\t\tid: edge.id, \n\t\t\t\tsource: edge.source,\n\t\t\t\ttarget: edge.target,\n\t\t\t\ttype: 'curve',\n\t\t\t\tcolor: 'rgba(250,250,250,0.6)'\n\t\t\t})\n\t\t});\n\t}\n\n\tbuild_network(data) {\n\t\tthis.process_nodes(data.nodes);\n\t\tthis.process_edges(data.edges);\n\t\tlet g = {nodes: self.nodes, edges: self.edges};\n\n\t\tlet s = new sigma({\n\t\t\tautoRescale : false,\n\t\t\tgraph: g,\n\t\t\trenderer: {\n\t\t\t\tcontainer: document.getElementById(self.container),\n\t\t\t\ttype: 'canvas'\n\t\t\t},\n\t\t\tsettings: {\n\t\t\t\tdoubleClickEnabled: false,\n\t\t\t\tminEdgeSize: 0.5,\n\t\t\t\tmaxEdgeSize: 4,\n\t\t\t\tminNodeSize: 0,\n\t\t\t\tmaxNodeSize: 0,\n\t\t\t\tdrawLabels: false,\n\t\t\t\tenableNodeHovering: false,\n\t\t\t}\n\t\t})\n\n\t\ts.configNoverlap({\n\t\t\tnodeMargin: 0.8,\n\t\t\tscaleNodes: 0.85,\n\t\t\tgridSize: 100,\n\t\t\teasing: 'quadraticInOut', // animation transition function\n\t\t\tduration: 10000   // animation duration. Long here for the purposes of this example only\n\t\t  });\n\n\t\t// Start the layout:\n\t\ts.startNoverlap();\n\n\n\t\ts.graph.nodes().forEach(function(n) {\n\t\t\tn.originalColor = n.color;\n\t\t  });\n\t\ts.graph.edges().forEach(function(e) {\n\t\t\te.originalColor = e.color;\n\t\t});\n\n\t\ts.bind('clickNode', e => {\n\t\t\tvar nodeId = e.data.node.id;\n\t\t\tvar toKeep = s.graph.neighbors(nodeId);\n\t\t\ttoKeep[nodeId] = e.data.node;\n\n\t\t\ts.graph.nodes().forEach(n => {\n\t\t\t\tif (toKeep[n.id]) {\n\t\t\t\t\tn.color = n.originalColor;\n\t\t\t\t} else {\n\t\t\t\t\tn.color = 'rgba(190,190,190,0.5)';\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ts.graph.edges().forEach(e => {\n\t\t\t\tif (toKeep[e.source] && toKeep[e.target]) {\n\t\t\t\t\te.color = 'rgba(250,250,250,1)';\n\t\t\t\t} else {\n\t\t\t\t\te.color = 'rgba(170,170,170,0.5)';\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Since the data has been modified, we need to\n\t\t\t// call the refresh method to make the colors\n\t\t\t// update effective.\n\t\t\ts.refresh();\n\t\t});\n\n\t\ts.bind('clickStage', function(e) {\n\t\t\ts.graph.nodes().forEach(function(n) {\n\t\t\t  n.color = n.originalColor;\n\t\t\t});\n\t\n\t\t\ts.graph.edges().forEach(function(e) {\n\t\t\t  e.color = e.originalColor;\n\t\t\t});\n\t\n\t\t\t// Same as in the previous event:\n\t\t\ts.refresh();\n\t\t});\n\n\t}\n} "]}