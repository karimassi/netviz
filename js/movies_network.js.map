{"version":3,"sources":["movies_network.js"],"names":["$","net","Network","d3","json","then","data","build_network","container","_classCallCheck","this","self","edges","sigma","settings","nodesPowRatio","classes","graph","addMethod","nodeId","neighbors","k","allNeighborsIndex","nodesIndex","nodes","forEach","node","push","index","label","name","x","y","size","color","id","edge","source","target","process_nodes","process_edges","type","document","getElementById","doubleClickEnabled","minEdgeSize","maxEdgeSize","minNodeSize","maxNodeSize","drawLabels","autoRescale","g","renderer","duration","n","enableNodeHovering","s","e","configNoverlap","gridSize","easing","toKeep","startNoverlap","originalColor","bind","refresh"],"mappings":"mZAAAA,EAAE,WACD,IAAMC,EAAM,IAAIC,QAAQ,kBACxBC,GAAGC,KAAK,4BAA4BC,KAAK,SAAAC,GACxCL,EAAIM,cAAcD,O,IAIdJ,Q,WAPL,SAAAA,EAACM,GAAWC,gBAAAC,KAAAR,GACZS,KAAMV,UAAUC,EAChBC,KAAGC,MAAK,GACPH,KAAGW,MAACL,GAHNM,MAAAC,SAAAC,cAAA,EAcEF,MAAMG,QAAQC,MAAMC,UAAU,YAAa,SAASC,GACnD,IARGjB,EACLkB,EAAA,GACCT,IAAIU,KADkBX,KAAAY,kBAAAH,IAAA,GAEtBR,EAAAU,GAAAX,KAAAa,WAAAF,GAGMR,OAAMC,W,2CAEX,SAEMU,GAUPA,EAAMC,QAAQ,SAAAC,GARbf,KAAAa,MAAAG,KAAUC,CACRR,GAAAA,EAAAA,GADFS,MAAAH,EAAAI,KAYCC,EAAGL,EAAKK,EATTC,EAAAN,EAAAM,EACEC,KATH,EAUAC,MAAAR,EAAAQ,Y,2BAGAV,SAAMC,GACLd,EAAAA,QAAKa,SAAAA,GACJW,KAAAA,MAAIT,KAAKS,CACTN,GAAAA,EAAAA,GACAE,OAACK,EAAMC,OACPL,OAACI,EAAME,OACPL,KAAAA,QACAC,MAAAA,8B,2BAiBH,SAAc5B,GACbI,KAAK6B,cAAcjC,EAAKkB,OACxBd,KAAK8B,cAdNlC,EAAAM,OACCA,IAAAA,EAAAA,CAAKY,MAACC,KAAQD,MAAAY,MAAQzB,KAAAC,OAEpBuB,EAAAA,IAAIC,MAAKD,CACTE,aAAM,EACNC,MAAAA,EACAG,SAAAA,CACAP,UAAKQ,SAAEC,eAAAhC,KAAAH,WALQiC,KAAhB,UAQD3B,SAAA,CAeE8B,oBAAoB,EACpBC,YAAa,GACbC,YAfH,EACCC,YAAKR,EACLS,YAAKR,EACLS,YAAQ,EAACzB,oBAAYA,KAGpB0B,EAAAA,eAAW,CACXjC,WAAOkC,GACPC,WAAAA,IACC5C,SAAAA,IACAiC,OAAAA,iBAFSY,SAHO,MAUhBP,EAAAA,gBAGAG,EAAAA,MAAAA,QAAAA,QAAY,SANHK,GAOTC,EAAAA,cAAAA,EAAAA,QAdgBC,EAAAvC,MAAlBL,QAAAa,QAAA,SAAAgC,GAkBAD,EAAAA,cAAEE,EAAexB,QAGhByB,EAAAA,KAAAA,YAHgB,SAAAF,GAIhBG,IAAAA,EAAQH,EAAAnD,KAAAoB,KAAAS,GAAkB0B,EAAAL,EAAAvC,MAAAG,UAAAD,GAC1BkC,EAAAA,GAAUI,EAAAnD,KAAQoB,KALF8B,EAAAvC,MAQjBO,QAAAC,QAAA,SAAA6B,GAiBMO,EAAOP,EAAEnB,IAhBfqB,EAACtB,MAAC4B,EAAAA,cAIDR,EAAAA,MAAES,0BAIFP,EAAAvC,MAFDL,QAAAa,QAAA,SAAAgC,GAIEO,EAAKP,EAAApB,SAAawB,EAAAJ,EAACnB,QACpBmB,EAAAvB,MAAIf,sBAEJ0C,EAAAA,MAAO1C,0BAQNqC,EAAAS,YAICR,EAAAA,KAAAA,aAAU,SAAAA,GACVD,EAAAvC,MAFDO,QAEOC,QAAA,SAAA6B,GACNG,EAAAA,MAAEvB,EAAAA,gBAKJsB,EAAAvC,MAAAL,QAAAa,QAAA,SAAAgC,GACAA,EAAAvB,MAAAuB,EAAAM,gBAIDP,EAAAA,kB","file":"movies_network.js","sourcesContent":["$(function() {\n\tconst net = new Network(\"movies-network\")\n\td3.json(\"data/movies_network.json\").then(data => {\n\t\tnet.build_network(data)\n\t});\n})\n\nclass Network {\n\tconstructor(container) {\n\t\tself.container = container;\n\t\tself.nodes = [];\n\t\tself.edges = [];\n\n        sigma.settings.nodesPowRatio = 1;\n\t\tsigma.classes.graph.addMethod('neighbors', function(nodeId) {\n\t\t\tvar k,\n\t\t\t\tneighbors = {},\n\t\t\t\tindex = this.allNeighborsIndex[nodeId] || {};\n\t\t\n\t\t\tfor (k in index)\n\t\t\t  neighbors[k] = this.nodesIndex[k];\n\t\t\n\t\t\treturn neighbors;\n\t\t  });\n\t}\n\n\tprocess_nodes(nodes) {\n\t\tnodes.forEach(node => {\n\t\t\tself.nodes.push({\n\t\t\t\tid: node.id, \n\t\t\t\tlabel: node.name,\n\t\t\t\tx: node.x,\n\t\t\t\ty: node.y, \n\t\t\t\tsize: 8,\n\t\t\t\tcolor: node.color//getHexColor(2**node.audio)\n\t\t\t})\n\t\t});\n\t}\n\n\tprocess_edges(edges) {\n\t\tedges.forEach(edge => {\n\t\t\tself.edges.push({\n\t\t\t\tid: edge.id, \n\t\t\t\tsource: edge.source,\n\t\t\t\ttarget: edge.target,\n\t\t\t\ttype: 'curve',\n\t\t\t\tcolor: 'rgba(250,250,250,0.6)'\n\t\t\t})\n\t\t});\n\t}\n\n\tbuild_network(data) {\n\t\tthis.process_nodes(data.nodes);\n\t\tthis.process_edges(data.edges);\n\t\tlet g = {nodes: self.nodes, edges: self.edges};\n\n\t\tlet s = new sigma({\n\t\t\tautoRescale : false,\n\t\t\tgraph: g,\n\t\t\trenderer: {\n\t\t\t\tcontainer: document.getElementById(self.container),\n\t\t\t\ttype: 'canvas'\n\t\t\t},\n\t\t\tsettings: {\n\t\t\t\tdoubleClickEnabled: false,\n\t\t\t\tminEdgeSize: 0.5,\n\t\t\t\tmaxEdgeSize: 4,\n\t\t\t\tminNodeSize: 0,\n\t\t\t\tmaxNodeSize: 0,\n\t\t\t\tdrawLabels: false,\n\t\t\t\tenableNodeHovering: false,\n\t\t\t}\n\t\t})\n\n\t\ts.configNoverlap({\n\t\t\tnodeMargin: 0.5,\n\t\t\tscaleNodes: 0.85,\n\t\t\tgridSize: 100,\n\t\t\teasing: 'quadraticInOut', // animation transition function\n\t\t\tduration: 10000   // animation duration. Long here for the purposes of this example only\n\t\t  });\n\n\t\t// Start the layout:\n\t\ts.startNoverlap();\n\n\n\t\ts.graph.nodes().forEach(function(n) {\n\t\t\tn.originalColor = n.color;\n\t\t  });\n\t\ts.graph.edges().forEach(function(e) {\n\t\t\te.originalColor = e.color;\n\t\t});\n\n\t\ts.bind('clickNode', e => {\n\t\t\tvar nodeId = e.data.node.id;\n\t\t\tvar toKeep = s.graph.neighbors(nodeId);\n\t\t\ttoKeep[nodeId] = e.data.node;\n\n\t\t\ts.graph.nodes().forEach(n => {\n\t\t\t\tif (toKeep[n.id]) {\n\t\t\t\t\tn.color = n.originalColor;\n\t\t\t\t} else {\n\t\t\t\t\tn.color = 'rgba(190,190,190,0.5)';\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ts.graph.edges().forEach(e => {\n\t\t\t\tif (toKeep[e.source] && toKeep[e.target]) {\n\t\t\t\t\te.color = 'rgba(250,250,250,1)';\n\t\t\t\t} else {\n\t\t\t\t\te.color = 'rgba(170,170,170,0.5)';\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Since the data has been modified, we need to\n\t\t\t// call the refresh method to make the colors\n\t\t\t// update effective.\n\t\t\ts.refresh();\n\t\t});\n\n\t\ts.bind('clickStage', function(e) {\n\t\t\ts.graph.nodes().forEach(function(n) {\n\t\t\t  n.color = n.originalColor;\n\t\t\t});\n\t\n\t\t\ts.graph.edges().forEach(function(e) {\n\t\t\t  e.color = e.originalColor;\n\t\t\t});\n\t\n\t\t\t// Same as in the previous event:\n\t\t\ts.refresh();\n\t\t});\n\n\t}\n} "]}