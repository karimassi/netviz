{"version":3,"sources":["genres_sankey.js"],"names":["SankeyMood","svgElement","_classCallCheck","this","svg","currentData","MONTHS","height","margin","setup","width","top","right","bottom","left","attr","concat","append","format","d","formatNumber","d3","sankey","nodeWidth","nodePadding","size","path","nodes","graph","forEach","push","name","source","target","links","value","key","object","i","indexOf","link","selectAll","enter","Math","style","max","dy","sort","a","b","text","call","drag","subject","data","parentNode","appendChild","x","y","darker","on","data_path","then","createSankey","min","sizeY","event","select","node","color","dragmove","instantiateMoodSankey","plot","showInitialPlot","csv","$"],"mappings":"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","file":"genres_sankey.js","sourcesContent":["// code adapted from https://bl.ocks.org/d3noob/06e72deea99e7b4859841f305f63ba85\n\n\n\nclass SankeyMood {\n    constructor(svgElement) {\n        this.svg = svgElement;\n        this.currentData = {};\n        this.MONTHS = [];\n        this.width = 0;\n        this.height = 0;\n        this.margin = {};\n        this.setup();\n    }\n\n    setup (){\n        this.width = 1100,\n        this.height =  600;\n        this.margin = {top: 40, right: 115, bottom: 50, left: 100};\n        this.svg.attr('viewBox', `0 -10 ${this.width} ${this.height}`); // viewbox : 0 0 widt height\n\n        // set the dimensions and margins of the graph\n\n        this.svg = this.svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(125,0)\");\n\n    }\n\n    createSankey() {\n\n        let MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July','August', 'September', 'October', 'November', 'December'];\n\n\n        var units = \"Items\";\n\n        var formatNumber = d3.format(\",.0f\");    // zero decimal places\n        var format = function(d) { return formatNumber(d) + \" \" + units; };\n\n        \n        var sankey = d3.sankey()\n        .nodeWidth(20)\n        .nodePadding(10)\n        .size([this.width-this.margin.right-this.margin.left, this.height-this.margin.bottom-this.margin.top]);\n\n        var path = sankey.link();\n\n        //set up graph in same style as original example but empty\n        let graph = {\"nodes\" : [], \"links\" : []};\n\n\n        this.currentData.forEach(function (d) {\n            graph.nodes.push({ \"name\": MONTHS[d.source-1] });\n            graph.nodes.push({ \"name\": d.target });\n            graph.links.push({ \"source\": MONTHS[d.source-1],\n                            \"target\": d.target,\n                            \"value\": +d.value });\n        });\n\n        // return only the distinct / unique nodes\n        graph.nodes = d3.keys(d3.nest()\n            .key(function (d) { return d.name; })\n            .object(graph.nodes));\n\n        // loop through each link replacing the text with its index from node\n        graph.links.forEach(function (d, i) {\n            graph.links[i].source = graph.nodes.indexOf(graph.links[i].source);\n            graph.links[i].target = graph.nodes.indexOf(graph.links[i].target);\n        });\n\n        // now loop through each nodes to make nodes an array of objects\n        // rather than an array of strings\n        graph.nodes.forEach(function (d, i) {\n            graph.nodes[i] = { \"name\": d };\n        });\n\n        sankey\n            .nodes(graph.nodes)\n            .links(graph.links)\n            .layout(32);\n\n            // add in the links\n        var link = this.svg\n        .append(\"g\").selectAll(\".link\")\n            .data(graph.links)\n        .enter().append(\"path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", path)\n            .style(\"stroke-width\", function(d) { return Math.max(2, d.dy); })\n            .sort(function(a, b) { return b.dy - a.dy; });\n\n        // add the link titles\n        link.append(\"title\")\n            .text(function(d) {\n                return d.source.name + \" â†’ \" + \n                    d.target.name + \"\\n\" + format(d.value); });\n\n        // add in the nodes\n        var node = this.svg.append(\"g\").selectAll(\".node\")\n            .data(graph.nodes)\n            .enter().append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", function(d) { \n                return \"translate(\" + d.x + \",\" + d.y + \")\"; })\n            .call(d3.drag()\n            .subject(function(d) {\n                return d;\n            })\n            .on(\"start\", function() {\n                this.parentNode.appendChild(this);\n            })\n            .on(\"drag\", dragmove));\n\n        // add the rectangles for the nodes\n        node.append(\"rect\")\n            .attr(\"height\", function(d) {return d.dy; })\n            .attr(\"width\", sankey.nodeWidth())\n            .style(\"fill\", function(d) { \n                return d.color = \"#db0000\"; })\n            .style(\"stroke\", function(d) { \n                return d3.rgb(d.color).darker(2); })\n        .append(\"title\")\n            .text(function(d) { \n                return d.name + \"\\n\" + format(d.value); });\n\n        // add in the title for the nodes\n        node.append(\"text\")\n            .attr(\"x\", 25)\n            .attr(\"y\", function(d) { return d.dy / 2; })\n            .attr(\"dy\", \".35em\")\n            .attr(\"text-anchor\", \"start\")\n            .style(\"font-size\", \"0.8em\")\n            .attr(\"transform\", null)\n            .text(function(d) { return d.name; })\n        .filter(function(d) { return d.x < 550; })\n            .attr(\"x\", -10)\n            .attr(\"text-anchor\", \"end\")\n            .style(\"font-size\", \"0.8em\");\n\n            // the function for moving the nodes\n        function dragmove(d) {\n            d3.select(this)\n                .attr(\"transform\", \n                    \"translate(\" \n                        + d.x + \",\" \n                        + (d.y = Math.max(\n                            0, Math.min(sizeY - d.dy, d3.event.y))\n                        ) + \")\");\n            sankey.relayout();\n            link.attr(\"d\", path);\n        } \n    }\n}\n\nfunction instantiateMoodSankey(svg, data_path) {\n    let plot = new SankeyMood(svg);\n    \n    function showInitialPlot() {\n        svg.style('opacity', 0);\n        svg.transition()\n            .delay(1000)\n            .duration(600)\n            .style('opacity', 1);\n    }\n\n    d3.csv(data_path).then(function(data) {\n        plot.currentData = data;\n        plot.createSankey();\n    });\n\n    \n\n}\n\n$(() => {\n    let svg = d3.select('svg#mood');\n    let data_path= 'data/mood.csv';\n\n    instantiateMoodSankey(svg, data_path) ;\n\n})"]}