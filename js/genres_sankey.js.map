{"version":3,"sources":["genres_sankey.js"],"names":["SankeyMood","svgElement","_classCallCheck","this","svg","currentData","MONTHS","width","height","margin","top","right","bottom","left","attr","concat","append","format","d","formatNumber","d3","sankey","nodeWidth","nodePadding","size","graph","links","path","link","name","source","nodes","push","target","value","nest","key","object","i","indexOf","layout","forEach","selectAll","data","enter","style","Math","max","dy","a","text","node","drag","subject","x","y","parentNode","dragmove","on","transition","delay","min","sizeY","event","relayout","color","rgb","darker","filter","select","instantiateMoodSankey","data_path","plot","csv","then","createSankey","$"],"mappings":"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","file":"genres_sankey.js","sourcesContent":["// code adapted from https://bl.ocks.org/d3noob/06e72deea99e7b4859841f305f63ba85\nclass SankeyMood {\n    constructor(svgElement) {\n        this.svg = svgElement;\n        this.currentData = {};\n        this.MONTHS = [];\n        this.width = 0;\n        this.height = 0;\n        this.margin = {};\n        this.setup();\n    }\n\n    setup (){\n        this.width = 1100,\n        this.height =  600;\n        this.margin = {top: 40, right: 115, bottom: 50, left: 100};\n        this.svg.attr('viewBox', `0 -10 ${this.width} ${this.height}`); // viewbox : 0 0 widt height\n\n        // set the dimensions and margins of the graph\n\n        this.svg = this.svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(125,0)\");\n\n    }\n\n    createSankey() {\n\n        let MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July','August', 'September', 'October', 'November', 'December'];\n\n\n        var units = \"Items\";\n\n        var formatNumber = d3.format(\",.0f\");    // zero decimal places\n        var format = function(d) { return formatNumber(d) + \" \" + units; };\n\n\n        var sankey = d3.sankey()\n        .nodeWidth(20)\n        .nodePadding(10)\n        .size([this.width-this.margin.right-this.margin.left, this.height-this.margin.bottom-this.margin.top]);\n\n        var path = sankey.link();\n\n        //set up graph in same style as original example but empty\n        let graph = {\"nodes\" : [], \"links\" : []};\n\n\n        this.currentData.forEach(function (d) {\n            graph.nodes.push({ \"name\": MONTHS[d.source-1] });\n            graph.nodes.push({ \"name\": d.target });\n            graph.links.push({ \"source\": MONTHS[d.source-1],\n                            \"target\": d.target,\n                            \"value\": +d.value });\n        });\n\n        // return only the distinct / unique nodes\n        graph.nodes = d3.keys(d3.nest()\n            .key(function (d) { return d.name; })\n            .object(graph.nodes));\n\n        // loop through each link replacing the text with its index from node\n        graph.links.forEach(function (d, i) {\n            graph.links[i].source = graph.nodes.indexOf(graph.links[i].source);\n            graph.links[i].target = graph.nodes.indexOf(graph.links[i].target);\n        });\n\n        // now loop through each nodes to make nodes an array of objects\n        // rather than an array of strings\n        graph.nodes.forEach(function (d, i) {\n            graph.nodes[i] = { \"name\": d };\n        });\n\n        sankey\n            .nodes(graph.nodes)\n            .links(graph.links)\n            .layout(32);\n\n            // add in the links\n        var link = this.svg\n        .append(\"g\").selectAll(\".link\")\n            .data(graph.links)\n        .enter().append(\"path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", path)\n            .style(\"stroke-width\", function(d) { return Math.max(2, d.dy); })\n            .sort(function(a, b) { return b.dy - a.dy; });\n\n        // add the link titles\n        link.append(\"title\")\n            .text(function(d) {\n                return d.source.name + \" â†’ \" +\n                    d.target.name + \"\\n\" + format(d.value); });\n\n        // add in the nodes\n        var node = this.svg.append(\"g\").selectAll(\".node\")\n            .data(graph.nodes)\n            .enter().append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", function(d) {\n                return \"translate(\" + d.x + \",\" + d.y + \")\"; })\n            .call(d3.drag()\n            .subject(function(d) {\n                return d;\n            })\n            .on(\"start\", function() {\n                this.parentNode.appendChild(this);\n            })\n            .on(\"drag\", dragmove));\n\n        // add the rectangles for the nodes\n        node.append(\"rect\")\n            .attr(\"height\", function(d) {return d.dy; })\n            .attr(\"width\", sankey.nodeWidth())\n            .style(\"fill\", function(d) {\n                return d.color = \"#db0000\"; })\n            .style(\"stroke\", function(d) {\n                return d3.rgb(d.color).darker(2); })\n        .append(\"title\")\n            .text(function(d) {\n                return d.name + \"\\n\" + format(d.value); });\n\n        // add in the title for the nodes\n        node.append(\"text\")\n            .attr(\"x\", 25)\n            .attr(\"y\", function(d) { return d.dy / 2; })\n            .attr(\"dy\", \".35em\")\n            .attr(\"text-anchor\", \"start\")\n            .style(\"font-size\", \"0.8em\")\n            .attr(\"transform\", null)\n            .text(function(d) { return d.name; })\n        .filter(function(d) { return d.x < 550; })\n            .attr(\"x\", -10)\n            .attr(\"text-anchor\", \"end\")\n            .style(\"font-size\", \"0.8em\");\n\n        // the function for moving the nodes\n        function dragmove(d) {\n            d3.select(this)\n                .attr(\"transform\",\n                    \"translate(\"\n                        + d.x + \",\"\n                        + (d.y = Math.max(\n                            0, Math.min(sizeY - d.dy, d3.event.y))\n                        ) + \")\");\n            sankey.relayout();\n            link.attr(\"d\", path);\n        }\n    }\n}\n\nfunction instantiateMoodSankey(svg, data_path) {\n    let plot = new SankeyMood(svg);\n\n    function showInitialPlot() {\n        svg.style('opacity', 0);\n        svg.transition()\n            .delay(1000)\n            .duration(600)\n            .style('opacity', 1);\n    }\n\n    d3.csv(data_path).then(function(data) {\n        plot.currentData = data;\n        plot.createSankey();\n    });\n\n\n\n}\n\n$(() => {\n    let svg = d3.select('svg#mood');\n    let data_path= 'data/mood.csv';\n\n    instantiateMoodSankey(svg, data_path) ;\n\n})\n"]}