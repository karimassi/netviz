{"version":3,"sources":["sorted_collection.js"],"names":["Array","prototype","last","this","length","SortedCollection","size","_classCallCheck","arr","fill","undefined","effectiveSize","comparator","lastIndex","value","i"],"mappings":"mZAGAA,MAAMC,UAAUC,KAAO,WACrB,OAAOC,KAAKA,KAAKC,OAAS,I,IAGtBC,iB,WAHJ,SAAAA,EAAYC,EAAKF,GAAjBG,gBAAAJ,KAAAE,GADFF,KAAAK,IAAA,IAAAR,MAAAM,GAAAG,UAAAC,GAWIP,KAAKQ,cAAgB,EAPnBN,KAAAA,KAAAA,EACJF,KAAAS,WAAAA,EACFT,KAAAU,UAAAV,KAAAK,IAAAJ,OAAA,S,yCAKI,SAAKO,GACL,QAAAD,IAAAP,KAAKG,MAALH,KAAAS,WAAAE,EAAAX,KAAAD,MAAA,CAEA,IADA,IACKW,EAAAA,KAALA,UACD,GAAAE,SAAAL,IAAAP,KAAAK,IAAAO,IAAAZ,KAAAS,WAAAE,EAAAX,KAAAK,IAAAO,KAEDA,IACFA,EAAAZ,KAAAU,YACAV,KAAAK,IAAAO,EAAA,GAAAZ,KAAAK,IAAAO,IAYSA,EAAIZ,KAAKU,YACRV,KAAKK,IAAIO,EAAI,GAAKD,U","file":"sorted_collection.js","sourcesContent":["/**\n * Returns the last element of the given array. Assumes that the length is > 0\n */\nArray.prototype.last = function() {\n  return this[this.length - 1];\n};\n\nclass SortedCollection {\n  /**\n   * Collection that keeps an array of the given size, such that all values\n   *  are at all time sorted according to the ordering specified by comparator\n   */\n  constructor(size, comparator) {\n    this.arr = new Array(size).fill(undefined);\n    this.effectiveSize = 0;\n    this.size = size;\n    this.comparator = comparator;\n    this.lastIndex = this.arr.length - 1;\n  }\n\n  /**\n   * Inserts the value in the index of the array where it should fit, possibly\n   *  moving other elements around in the process \n   */\n  tryToInsert(value) {\n    if(this.last === undefined || this.comparator(value, this.last)) {\n      let i;\n      for(i = this.lastIndex;\n          i >= 0 && (this.arr[i] === undefined || this.comparator(value, this.arr[i]));\n          i--) {\n        if(i < this.lastIndex) {\n          this.arr[i + 1] = this.arr[i];\n        }\n      }\n      if(i < this.lastIndex) {\n          this.arr[i + 1] = value;\n      }\n    }\n  }\n}\n"]}