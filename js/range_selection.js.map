{"version":3,"sources":["range_selection.js"],"names":["RangeSelector","id","points","callback","_classCallCheck","this","svg","d3","select","concat","selectionTools","percentScaling","undefined","reversedPercentScaling","selectionRect","plot","draggedSide","positionToDateScaling","setup","x","Math","min","left","line","attr","right","width","abs","side","result","getPosition","lowerBound","Date","getTime","upperBound","percentage","minDistanceCheck","arguments","length","max","tools","position","console","log","triangle","updateSelectionRect","leastDistance","currentClosest","_this","_d3$mouse2","_slicedToArray","mouse","node","mouseX","forEach","dist","mouseY","_d3$mouse4","moveSelectionTool","emitPosition","heihgt","marginX","_this2","sort","a","b","month","minMonth","maxMonth","_ref","Number","MAX_SAFE_INTEGER","minCount","maxCount","i","count","plotBounds","timeBounds","scaleX","scaleTime","domain","range","scaleY","area","curve","curveCatmullRom","alpha","d","y0","y1","append","scaleLinear","data","leftLine","leftTriangle","rightTriangle","style","rightLine","year","symbol","type","symbolTriangle","size","sizeX","sizeY","selectAll","csv","push","text","on","handleMouseDown","handleMouseMove","handleMouseUp","createPlot","$","then"],"mappings":"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","file":"range_selection.js","sourcesContent":["class RangeSelector {\n  constructor(id, points, callback) {\n    this.svg = d3.select(`#${id}`);\n    this.id = id;\n    this.points = points;\n    this.selectionTools = {};\n    this.percentScaling = undefined;\n    this.reversedPercentScaling = undefined;\n    this.selectionRect = undefined;\n    this.plot = undefined;\n    this.draggedSide = undefined;\n    this.positionToDateScaling = undefined;\n    this.callback = callback;\n    this.setup();\n  }\n\n\n  updateSelectionRect() {\n    const x = Math.min(\n      this.selectionTools.left.line.attr('x1'),\n      this.selectionTools.right.line.attr('x1')\n    );\n    const width = Math.abs(\n      this.selectionTools.right.line.attr('x1') -\n      this.selectionTools.left.line.attr('x1')\n    );\n    this.selectionRect\n      .attr('x', x)\n      .attr('width', width);\n  }\n\n  getPosition(side) {\n    return parseFloat(this.selectionTools[side].line.attr('x1'));\n  }\n\n  emitPosition() {\n    // For some reason d3 is messing up with the same reference, so the result\n    //  has to be cloned...\n    let result = this.positionToDateScaling(this.getPosition('left'));\n    const lowerBound = new Date(result.getTime());\n    result = this.positionToDateScaling(this.getPosition('right'));\n    const upperBound = new Date(result.getTime());\n\n    this.callback(lowerBound, upperBound);\n  }\n\n  moveSelectionTool(side, percentage, minDistanceCheck=false) {\n    percentage = Math.max(0, Math.min(1, percentage));\n\n    const tools = this.selectionTools[side];\n    let position = this.percentScaling(percentage);\n\n    if(minDistanceCheck) {\n      const MIN_DISTANCE = 20;\n      switch(side) {\n        case 'right':\n          position = Math.max(\n            position,\n            this.getPosition('left') + MIN_DISTANCE\n          );\n          break;\n        case 'left':\n          position = Math.min(\n            position,\n            this.getPosition('right') - MIN_DISTANCE\n          );\n          break;\n        default:\n          console.log('Trying to move unsupported side');\n      }\n    }\n\n    tools.line\n      .attr('x1', position)\n      .attr('x2', position);\n\n    tools.triangle\n      .attr('transform', `translate(${position} 8) rotate(180)`);\n\n    this.updateSelectionRect();\n  }\n\n\n  handleMouseDown() {\n    const [mouseX, mouseY] = d3.mouse(this.plot.node());\n\n    if(mouseY <= 40) {\n      const MAX_CLICK_DISTANCE = 10;\n      let leastDistance = MAX_CLICK_DISTANCE;\n      let currentClosest = '';\n      ['left', 'right'].forEach(side => {\n        const dist = Math.abs(mouseX - this.selectionTools[side].line.attr('x1'));\n        if(dist < leastDistance) {\n          leastDistance = dist;\n          currentClosest = side;\n        }\n      });\n      if(currentClosest !== '') {\n        this.draggedSide = currentClosest;\n      }\n    }\n  }\n\n  handleMouseMove() {\n    if(this.draggedSide !== undefined) {\n      const [mouseX, _] = d3.mouse(this.plot.node());\n\n      this.moveSelectionTool(\n        this.draggedSide, this.reversedPercentScaling(mouseX), true);\n    }\n  }\n\n  handleMouseUp() {\n    if(this.draggedSide !== undefined) {\n      this.draggedSide = undefined;\n      this.emitPosition();\n    }\n  }\n\n  createPlot(width, heihgt, marginX) {\n    this.points.sort((a, b) => a.month - b.month);\n\n    const minMonth = this.points[0].month;\n    const maxMonth = this.points[this.points.length - 1].month;\n\n    let [minCount, maxCount] = [Number.MAX_SAFE_INTEGER, 0];\n    for(let i = 0; i < this.points.length; i++) {\n      const count = this.points[i].count;\n      minCount = Math.min(minCount, count);\n      maxCount = Math.max(maxCount, count);\n    }\n\n    const plotBounds = [marginX, width - marginX];\n\n    const timeBounds = [minMonth, maxMonth];\n\n    const scaleX = d3.scaleTime()\n      .domain(timeBounds)\n      .range(plotBounds);\n\n    this.positionToDateScaling = d3.scaleTime()\n      .domain(plotBounds)\n      .range(timeBounds);\n\n    this.percentScaling = d3.scaleLinear()\n      .domain([0, 1])\n      .range(plotBounds);\n\n    this.reversedPercentScaling = d3.scaleLinear()\n      .domain(plotBounds)\n      .range([0, 1]);\n\n    const scaleY = d3.scaleLinear()\n      .domain([0, maxCount])\n      .range([40, 20]);\n\n    const area = d3.area()\n      .curve(d3.curveCatmullRom.alpha(0.5))\n      .x(d => scaleX(d.month))\n      .y0(40)\n      .y1(d => scaleY(d.count));\n\n    this.plot = this.svg.append('path')\n      .data([this.points])\n      .attr('fill', 'whitesmoke')\n      .attr('d', area);\n\n    this.selectionRect = this.svg.append('rect')\n      .attr('x', 100)\n      .attr('y', 10)\n      .attr('width', 100)\n      .attr('height', 30)\n      .attr('fill', 'rgba(255, 0, 0, .2)');\n\n    const leftLine = this.svg.append('line')\n      .attr('x1', 0)\n      .attr('x2', 0)\n      .attr('y1', 7)\n      .attr('y2', 40)\n      .attr('stroke', 'whitesmoke')\n      .style('stroke-dasharray', '3, 1');\n\n    const rightLine = this.svg.append('line')\n      .attr('x1', 500)\n      .attr('x2', 500)\n      .attr('y1', 7)\n      .attr('y2', 40)\n      .attr('stroke', 'whitesmoke')\n      .style('stroke-dasharray', '3, 1');\n\n    const leftTriangle = this.svg.append('path')\n      .attr('d', d3.symbol().type(d3.symbolTriangle).size(20))\n      .attr('fill', 'whitesmoke')\n      .attr('transform', 'translate(100 8) rotate(180)');\n\n    const rightTriangle = this.svg.append('path')\n      .attr('d', d3.symbol().type(d3.symbolTriangle).size(20))\n      .attr('fill', 'whitesmoke')\n      .attr('transform', 'translate(200 8) rotate(180)');\n\n    this.selectionTools = {\n      left: {\n        line: leftLine,\n        triangle: leftTriangle\n      },\n      right: {\n        line: rightLine,\n        triangle: rightTriangle\n      }\n    };\n\n    this.moveSelectionTool('left', 0);\n    this.moveSelectionTool('right', 1);\n\n    this.svg\n      .selectAll('text')\n      .data([2015, 2016, 2017, 2018, 2019, 2020, 2021])\n      .enter()\n      .append('text')\n        .attr('fill', 'whitesmoke')\n        .attr('x', year => scaleX(new Date(`01-01-${year}`)))\n        .attr('y', 44)\n        .style('font-size', '.5em')\n        .style('user-select', 'none')\n        .style('text-anchor', 'middle')\n        .style('alignment-baseline', 'hanging')\n        .text(year => year);\n\n    this.svg\n      .on('mousedown', () => this.handleMouseDown());\n\n    d3.select('body')\n      .on(`mousemove.${this.id}`, () => this.handleMouseMove())\n      .on(`mouseup.${this.id}`, () => this.handleMouseUp());\n  }\n\n  setup() {\n    const [sizeX, sizeY] = [500, 55];\n    const [marginX] = [10];\n    this.svg.attr('viewBox', `0 0 ${sizeX} ${sizeY}`);\n\n    this.createPlot(sizeX, sizeY, marginX);\n  }\n}\n\n$(() => {\n  d3.csv('data/release_density_per_month.csv').then(data => {\n    const points = [];\n\n    for(let i = 0; i < data.length; i++) {\n      points.push({\n        month: new Date(data[i]['release month']),\n        count: data[i]['count']\n      });\n    }\n\n    const selector = new RangeSelector(\n      'exporatory-time-selection',\n      points,\n      (left, right) => console.log(`${left}, ${right}`));\n  });\n});\n"]}