{"version":3,"sources":["range_selection.js"],"names":["RangeSelector","id","points","callback","dateFormatter","_classCallCheck","this","svg","d3","select","concat","selectionTools","percentScaling","undefined","reversedPercentScaling","selectionRect","plot","draggedSide","positionToDateScaling","setup","x","Math","min","left","line","attr","right","width","side","parseFloat","result","getPosition","lowerBound","Date","getTime","upperBound","percentage","minDistanceCheck","arguments","length","max","tools","position","MIN_DISTANCE","triangle","display","displayText","console","updateSelectionRect","leastDistance","currentClosest","_d3$mouse2","_slicedToArray","mouse","node","mouseX","forEach","dist","abs","_this","mouseY","moveSelectionTool","emitPosition","heihgt","marginX","_this2","sort","a","b","month","minMonth","maxMonth","_ref","Number","MAX_SAFE_INTEGER","minCount","maxCount","i","count","plotBounds","timeBounds","scaleX","scaleTime","domain","range","scaleLinear","area","curveCatmullRom","y0","y1","d","scaleY","data","append","leftLine","rightLine","leftTriangle","rightTriangle","leftDisplay","style","rightDisplay","rightDisplayText","size","symbol","type","symbolTriangle","year","on","leftDisplayText","sizeX","sizeY","text","selectAll","enter","handleMouseDown","handleMouseMove","handleMouseUp","createPlot"],"mappings":"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","file":"range_selection.js","sourcesContent":["class RangeSelector {\n  constructor(id, points, callback, dateFormatter) {\n    this.svg = d3.select(`#${id}`);\n    this.id = id;\n    this.points = points;\n    this.selectionTools = {};\n    this.percentScaling = undefined;\n    this.reversedPercentScaling = undefined;\n    this.selectionRect = undefined;\n    this.plot = undefined;\n    this.draggedSide = undefined;\n    this.positionToDateScaling = undefined;\n    this.callback = callback;\n    this.dateFormatter = dateFormatter;\n    this.setup();\n  }\n\n\n  /**\n   * Changes the size and position of the selection rectangle (the red one)\n   */\n  updateSelectionRect() {\n    const x = Math.min(\n      this.selectionTools.left.line.attr('x1'),\n      this.selectionTools.right.line.attr('x1')\n    );\n    const width = Math.abs(\n      this.selectionTools.right.line.attr('x1') -\n      this.selectionTools.left.line.attr('x1')\n    );\n    this.selectionRect\n      .attr('x', x)\n      .attr('width', width);\n  }\n\n  /**\n   * Gets the position of a side based on the position of its respective\n   *  selecton line.\n   */\n  getPosition(side) {\n    return parseFloat(this.selectionTools[side].line.attr('x1'));\n  }\n\n  /**\n   * Converts the position of selection tools to dates and calls the callback\n   *  with these dates as parameters\n   */\n  emitPosition() {\n    // For some reason d3 is messing up with the same reference, so the result\n    //  has to be cloned...\n    let result = this.positionToDateScaling(this.getPosition('left'));\n    const lowerBound = new Date(result.getTime());\n    result = this.positionToDateScaling(this.getPosition('right'));\n    const upperBound = new Date(result.getTime());\n\n    this.callback(lowerBound, upperBound);\n  }\n\n  /**\n   * Moves the selection tool of this side to the specified position, while\n   *  also keeping the minimum specified distance from the other side if\n   *  specified\n   */\n  moveSelectionTool(side, percentage, minDistanceCheck=false) {\n    percentage = Math.max(0, Math.min(1, percentage));\n\n    const tools = this.selectionTools[side];\n    let position = this.percentScaling(percentage);\n\n    if(minDistanceCheck) {\n      const MIN_DISTANCE = 40;\n      switch(side) {\n        case 'right':\n          position = Math.max(\n            position,\n            this.getPosition('left') + MIN_DISTANCE\n          );\n          break;\n        case 'left':\n          position = Math.min(\n            position,\n            this.getPosition('right') - MIN_DISTANCE\n          );\n          break;\n        default:\n          console.log('Trying to move unsupported side');\n      }\n    }\n\n    tools.line\n      .attr('x1', position)\n      .attr('x2', position);\n\n    tools.triangle\n      .attr('transform', `translate(${position} 18) rotate(180)`);\n\n    tools.display\n      .attr('transform', `translate(${position} 7)`)\n\n    tools.displayText\n      .attr('transform', `translate(${position} 8)`);\n\n    tools.displayText\n      .text(this.dateFormatter(this.positionToDateScaling(position)));\n\n    this.updateSelectionRect();\n  }\n\n  /**\n   * Callback when mouse is pressed on SVG element. It checks if the selector is\n   *  close and activates selection of that side if that's the case\n   */\n  handleMouseDown() {\n    const [mouseX, mouseY] = d3.mouse(this.plot.node());\n\n    if(mouseY <= 40) {\n      const MAX_CLICK_DISTANCE = 10;\n      let leastDistance = MAX_CLICK_DISTANCE;\n      let currentClosest = '';\n      ['left', 'right'].forEach(side => {\n        const dist = Math.abs(mouseX - this.selectionTools[side].line.attr('x1'));\n        if(dist < leastDistance) {\n          leastDistance = dist;\n          currentClosest = side;\n        }\n      });\n      if(currentClosest !== '') {\n        this.draggedSide = currentClosest;\n      }\n    }\n  }\n\n  /**\n   * Callback when mouse is moved. If the selection is active, the selection\n   *  tools for the side for which selection is active will be moved\n   */\n  handleMouseMove() {\n    if(this.draggedSide !== undefined) {\n      const [mouseX, _] = d3.mouse(this.plot.node());\n\n      this.moveSelectionTool(\n        this.draggedSide, this.reversedPercentScaling(mouseX), true);\n    }\n  }\n\n  /**\n   * Callback for the release of mouse click in SVG element. If the selection\n   *  was active, emits the value and deactivates selection.\n   */\n  handleMouseUp() {\n    if(this.draggedSide !== undefined) {\n      this.draggedSide = undefined;\n      this.emitPosition();\n    }\n  }\n\n  /**\n   * Creates GUI elements of the plot and sets the proper callbacks.\n   */\n  createPlot(width, heihgt, marginX) {\n    this.points.sort((a, b) => a.month - b.month);\n\n    const minMonth = this.points[0].month;\n    const maxMonth = this.points[this.points.length - 1].month;\n\n    let [minCount, maxCount] = [Number.MAX_SAFE_INTEGER, 0];\n    for(let i = 0; i < this.points.length; i++) {\n      const count = this.points[i].count;\n      minCount = Math.min(minCount, count);\n      maxCount = Math.max(maxCount, count);\n    }\n\n    const plotBounds = [marginX, width - marginX];\n\n    const timeBounds = [minMonth, maxMonth];\n\n    const scaleX = d3.scaleTime()\n      .domain(timeBounds)\n      .range(plotBounds);\n\n    this.positionToDateScaling = d3.scaleTime()\n      .domain(plotBounds)\n      .range(timeBounds);\n\n    this.percentScaling = d3.scaleLinear()\n      .domain([0, 1])\n      .range(plotBounds);\n\n    this.reversedPercentScaling = d3.scaleLinear()\n      .domain(plotBounds)\n      .range([0, 1]);\n\n    const scaleY = d3.scaleLinear()\n      .domain([0, maxCount])\n      .range([50, 30]);\n\n    const area = d3.area()\n      .curve(d3.curveCatmullRom.alpha(0.5))\n      .x(d => scaleX(d.month))\n      .y0(50)\n      .y1(d => scaleY(d.count));\n\n    this.plot = this.svg.append('path')\n      .data([this.points])\n      .attr('fill', 'whitesmoke')\n      .attr('d', area);\n\n    this.selectionRect = this.svg.append('rect')\n      .attr('x', 100)\n      .attr('y', 20)\n      .attr('width', 100)\n      .attr('height', 30)\n      .attr('fill', 'rgba(255, 0, 0, .2)');\n\n    const leftLine = this.svg.append('line')\n      .attr('x1', 0)\n      .attr('x2', 0)\n      .attr('y1', 17)\n      .attr('y2', 50)\n      .attr('stroke', 'whitesmoke')\n      .style('stroke-dasharray', '3, 1');\n\n    const rightLine = this.svg.append('line')\n      .attr('x1', 500)\n      .attr('x2', 500)\n      .attr('y1', 17)\n      .attr('y2', 50)\n      .attr('stroke', 'whitesmoke')\n      .style('stroke-dasharray', '3, 1');\n\n    const leftTriangle = this.svg.append('path')\n      .attr('d', d3.symbol().type(d3.symbolTriangle).size(20))\n      .attr('fill', 'whitesmoke')\n      .attr('transform', 'translate(100 18) rotate(180)');\n\n    const rightTriangle = this.svg.append('path')\n      .attr('d', d3.symbol().type(d3.symbolTriangle).size(20))\n      .attr('fill', 'whitesmoke')\n      .attr('transform', 'translate(200 18) rotate(180)');\n\n    const leftDisplay = this.svg.append('rect')\n      .attr('x', -20)\n      .attr('y', -3)\n      .attr('width', 40)\n      .attr('height', 13)\n      .attr('fill', 'white')\n      .attr('rx', 4)\n      .attr('transform', 'translate(0 0)');\n\n    const rightDisplay = this.svg.append('rect')\n      .attr('x', -20)\n      .attr('y', -3)\n      .attr('width', 40)\n      .attr('height', 13)\n      .attr('fill', 'white')\n      .attr('rx', 4)\n      .attr('transform', 'translate(0 0)');\n\n    const leftDisplayText = this.svg.append('text')\n      .attr('fill', 'black')\n      .style('font-size', '.39em')\n      .style('user-select', 'none')\n      .style('text-anchor', 'middle')\n      .style('alignment-baseline', 'hanging')\n      .text('01-01-1970');\n\n    const rightDisplayText = this.svg.append('text')\n      .attr('fill', 'black')\n      .style('font-size', '.39em')\n      .style('user-select', 'none')\n      .style('text-anchor', 'middle')\n      .style('alignment-baseline', 'hanging')\n      .text('01-01-1970');\n\n    this.selectionTools = {\n      left: {\n        displayText: leftDisplayText,\n        display: leftDisplay,\n        line: leftLine,\n        triangle: leftTriangle\n      },\n      right: {\n        displayText: rightDisplayText,\n        display: rightDisplay,\n        line: rightLine,\n        triangle: rightTriangle\n      }\n    };\n\n    this.moveSelectionTool('left', 0);\n    this.moveSelectionTool('right', 1);\n\n    this.svg\n      .selectAll('text.years')\n      .data([2015, 2016, 2017, 2018, 2019, 2020, 2021])\n      .enter()\n      .append('text')\n        .attr('class', 'years')\n        .attr('fill', 'whitesmoke')\n        .attr('x', year => scaleX(new Date(`01-01-${year}`)))\n        .attr('y', 54)\n        .style('font-size', '.5em')\n        .style('user-select', 'none')\n        .style('text-anchor', 'middle')\n        .style('alignment-baseline', 'hanging')\n        .text(year => year);\n\n    this.svg\n      .on('mousedown', () => this.handleMouseDown());\n\n    d3.select('body')\n      .on(`mousemove.${this.id}`, () => this.handleMouseMove())\n      .on(`mouseup.${this.id}`, () => this.handleMouseUp());\n\n    this.emitPosition();\n  }\n\n  /**\n   * Sets the size of the SVG and initiates GUI creation procedure\n   */\n  setup() {\n    const [sizeX, sizeY] = [500, 65];\n    const [marginX] = [30];\n    this.svg.attr('viewBox', `0 0 ${sizeX} ${sizeY}`);\n\n    this.createPlot(sizeX, sizeY, marginX);\n  }\n}\n"]}