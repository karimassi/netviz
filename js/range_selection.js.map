{"version":3,"sources":["range_selection.js"],"names":["RangeSelector","id","points","callback","dateFormatter","_classCallCheck","this","svg","d3","select","concat","selectionTools","percentScaling","undefined","reversedPercentScaling","selectionRect","plot","draggedSide","positionToDateScaling","setup","x","Math","min","left","line","attr","width","abs","right","side","result","getPosition","lowerBound","Date","getTime","upperBound","percentage","minDistanceCheck","arguments","length","max","tools","position","console","log","triangle","display","displayText","leastDistance","currentClosest","_this","_d3$mouse2","_slicedToArray","mouse","node","mouseX","forEach","mouseY","dist","_d3$mouse4","moveSelectionTool","emitPosition","heihgt","marginX","_this2","sort","a","b","month","minMonth","maxMonth","_ref","Number","MAX_SAFE_INTEGER","minCount","maxCount","i","count","plotBounds","timeBounds","scaleX","scaleTime","domain","range","scaleLinear","area","curve","d","scaleY","y0","y1","data","append","leftTriangle","rightTriangle","leftDisplay","rightDisplay","leftDisplayText","leftLine","style","rightDisplayText","rightLine","symbolTriangle","size","symbol","handleMouseDown","on","sizeY","createPlot","text","selectAll","enter","year","handleMouseMove","handleMouseUp"],"mappings":"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","file":"range_selection.js","sourcesContent":["class RangeSelector {\n  constructor(id, points, callback, dateFormatter) {\n    this.svg = d3.select(`#${id}`);\n    this.id = id;\n    this.points = points;\n    this.selectionTools = {};\n    this.percentScaling = undefined;\n    this.reversedPercentScaling = undefined;\n    this.selectionRect = undefined;\n    this.plot = undefined;\n    this.draggedSide = undefined;\n    this.positionToDateScaling = undefined;\n    this.callback = callback;\n    this.dateFormatter = dateFormatter;\n    this.setup();\n  }\n\n\n  updateSelectionRect() {\n    const x = Math.min(\n      this.selectionTools.left.line.attr('x1'),\n      this.selectionTools.right.line.attr('x1')\n    );\n    const width = Math.abs(\n      this.selectionTools.right.line.attr('x1') -\n      this.selectionTools.left.line.attr('x1')\n    );\n    this.selectionRect\n      .attr('x', x)\n      .attr('width', width);\n  }\n\n  getPosition(side) {\n    return parseFloat(this.selectionTools[side].line.attr('x1'));\n  }\n\n  emitPosition() {\n    // For some reason d3 is messing up with the same reference, so the result\n    //  has to be cloned...\n    let result = this.positionToDateScaling(this.getPosition('left'));\n    const lowerBound = new Date(result.getTime());\n    result = this.positionToDateScaling(this.getPosition('right'));\n    const upperBound = new Date(result.getTime());\n\n    this.callback(lowerBound, upperBound);\n  }\n\n  moveSelectionTool(side, percentage, minDistanceCheck=false) {\n    percentage = Math.max(0, Math.min(1, percentage));\n\n    const tools = this.selectionTools[side];\n    let position = this.percentScaling(percentage);\n\n    if(minDistanceCheck) {\n      const MIN_DISTANCE = 40;\n      switch(side) {\n        case 'right':\n          position = Math.max(\n            position,\n            this.getPosition('left') + MIN_DISTANCE\n          );\n          break;\n        case 'left':\n          position = Math.min(\n            position,\n            this.getPosition('right') - MIN_DISTANCE\n          );\n          break;\n        default:\n          console.log('Trying to move unsupported side');\n      }\n    }\n\n    tools.line\n      .attr('x1', position)\n      .attr('x2', position);\n\n    tools.triangle\n      .attr('transform', `translate(${position} 18) rotate(180)`);\n\n    tools.display\n      .attr('transform', `translate(${position} 7)`)\n\n    tools.displayText\n      .attr('transform', `translate(${position} 8)`);\n\n    tools.displayText\n      .text(this.dateFormatter(this.positionToDateScaling(position)));\n\n    this.updateSelectionRect();\n  }\n\n\n  handleMouseDown() {\n    const [mouseX, mouseY] = d3.mouse(this.plot.node());\n\n    if(mouseY <= 40) {\n      const MAX_CLICK_DISTANCE = 10;\n      let leastDistance = MAX_CLICK_DISTANCE;\n      let currentClosest = '';\n      ['left', 'right'].forEach(side => {\n        const dist = Math.abs(mouseX - this.selectionTools[side].line.attr('x1'));\n        if(dist < leastDistance) {\n          leastDistance = dist;\n          currentClosest = side;\n        }\n      });\n      if(currentClosest !== '') {\n        this.draggedSide = currentClosest;\n      }\n    }\n  }\n\n  handleMouseMove() {\n    if(this.draggedSide !== undefined) {\n      const [mouseX, _] = d3.mouse(this.plot.node());\n\n      this.moveSelectionTool(\n        this.draggedSide, this.reversedPercentScaling(mouseX), true);\n    }\n  }\n\n  handleMouseUp() {\n    if(this.draggedSide !== undefined) {\n      this.draggedSide = undefined;\n      this.emitPosition();\n    }\n  }\n\n  createPlot(width, heihgt, marginX) {\n    this.points.sort((a, b) => a.month - b.month);\n\n    const minMonth = this.points[0].month;\n    const maxMonth = this.points[this.points.length - 1].month;\n\n    let [minCount, maxCount] = [Number.MAX_SAFE_INTEGER, 0];\n    for(let i = 0; i < this.points.length; i++) {\n      const count = this.points[i].count;\n      minCount = Math.min(minCount, count);\n      maxCount = Math.max(maxCount, count);\n    }\n\n    const plotBounds = [marginX, width - marginX];\n\n    const timeBounds = [minMonth, maxMonth];\n\n    const scaleX = d3.scaleTime()\n      .domain(timeBounds)\n      .range(plotBounds);\n\n    this.positionToDateScaling = d3.scaleTime()\n      .domain(plotBounds)\n      .range(timeBounds);\n\n    this.percentScaling = d3.scaleLinear()\n      .domain([0, 1])\n      .range(plotBounds);\n\n    this.reversedPercentScaling = d3.scaleLinear()\n      .domain(plotBounds)\n      .range([0, 1]);\n\n    const scaleY = d3.scaleLinear()\n      .domain([0, maxCount])\n      .range([50, 30]);\n\n    const area = d3.area()\n      .curve(d3.curveCatmullRom.alpha(0.5))\n      .x(d => scaleX(d.month))\n      .y0(50)\n      .y1(d => scaleY(d.count));\n\n    this.plot = this.svg.append('path')\n      .data([this.points])\n      .attr('fill', 'whitesmoke')\n      .attr('d', area);\n\n    this.selectionRect = this.svg.append('rect')\n      .attr('x', 100)\n      .attr('y', 20)\n      .attr('width', 100)\n      .attr('height', 30)\n      .attr('fill', 'rgba(255, 0, 0, .2)');\n\n    const leftLine = this.svg.append('line')\n      .attr('x1', 0)\n      .attr('x2', 0)\n      .attr('y1', 17)\n      .attr('y2', 50)\n      .attr('stroke', 'whitesmoke')\n      .style('stroke-dasharray', '3, 1');\n\n    const rightLine = this.svg.append('line')\n      .attr('x1', 500)\n      .attr('x2', 500)\n      .attr('y1', 17)\n      .attr('y2', 50)\n      .attr('stroke', 'whitesmoke')\n      .style('stroke-dasharray', '3, 1');\n\n    const leftTriangle = this.svg.append('path')\n      .attr('d', d3.symbol().type(d3.symbolTriangle).size(20))\n      .attr('fill', 'whitesmoke')\n      .attr('transform', 'translate(100 18) rotate(180)');\n\n    const rightTriangle = this.svg.append('path')\n      .attr('d', d3.symbol().type(d3.symbolTriangle).size(20))\n      .attr('fill', 'whitesmoke')\n      .attr('transform', 'translate(200 18) rotate(180)');\n\n    const leftDisplay = this.svg.append('rect')\n      .attr('x', -20)\n      .attr('y', -3)\n      .attr('width', 40)\n      .attr('height', 13)\n      .attr('fill', 'white')\n      .attr('rx', 4)\n      .attr('transform', 'translate(0 0)');\n\n    const rightDisplay = this.svg.append('rect')\n      .attr('x', -20)\n      .attr('y', -3)\n      .attr('width', 40)\n      .attr('height', 13)\n      .attr('fill', 'white')\n      .attr('rx', 4)\n      .attr('transform', 'translate(0 0)');\n\n    const leftDisplayText = this.svg.append('text')\n      .attr('fill', 'black')\n      .style('font-size', '.39em')\n      .style('user-select', 'none')\n      .style('text-anchor', 'middle')\n      .style('alignment-baseline', 'hanging')\n      .text('01-01-1970');\n\n    const rightDisplayText = this.svg.append('text')\n      .attr('fill', 'black')\n      .style('font-size', '.39em')\n      .style('user-select', 'none')\n      .style('text-anchor', 'middle')\n      .style('alignment-baseline', 'hanging')\n      .text('01-01-1970');\n\n    this.selectionTools = {\n      left: {\n        displayText: leftDisplayText,\n        display: leftDisplay,\n        line: leftLine,\n        triangle: leftTriangle\n      },\n      right: {\n        displayText: rightDisplayText,\n        display: rightDisplay,\n        line: rightLine,\n        triangle: rightTriangle\n      }\n    };\n\n    this.moveSelectionTool('left', 0);\n    this.moveSelectionTool('right', 1);\n\n    this.svg\n      .selectAll('text.years')\n      .data([2015, 2016, 2017, 2018, 2019, 2020, 2021])\n      .enter()\n      .append('text')\n        .attr('class', 'years')\n        .attr('fill', 'whitesmoke')\n        .attr('x', year => scaleX(new Date(`01-01-${year}`)))\n        .attr('y', 54)\n        .style('font-size', '.5em')\n        .style('user-select', 'none')\n        .style('text-anchor', 'middle')\n        .style('alignment-baseline', 'hanging')\n        .text(year => year);\n\n    this.svg\n      .on('mousedown', () => this.handleMouseDown());\n\n    d3.select('body')\n      .on(`mousemove.${this.id}`, () => this.handleMouseMove())\n      .on(`mouseup.${this.id}`, () => this.handleMouseUp());\n\n    this.emitPosition();\n  }\n\n  setup() {\n    const [sizeX, sizeY] = [500, 65];\n    const [marginX] = [30];\n    this.svg.attr('viewBox', `0 0 ${sizeX} ${sizeY}`);\n\n    this.createPlot(sizeX, sizeY, marginX);\n  }\n}\n"]}