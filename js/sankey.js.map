{"version":3,"sources":["sankey.js"],"names":["d3","sankey","nodeWidth","nodePadding","size","node","sourceLinks","link","forEach","sy","dy","targetLinks","ty","center","value","_","arguments","length","nodes","links","layout","iterations","computeNodeDepths","source","target","push","Math","max","sum","nextNodes","remainingNodes","dx","indexOf","moveSinksRight","x","moveSourcesRight","kx","computeNodeLinks","entries","nest","key","values","d","initializeNodeDepth","ky","min","nodesByBreadth","i","y","resolveCollisions","relaxRightToLeft","alpha","weightedTarget","reverse","relaxLeftToRight","weightedSource","y0","n","computeNodeValues","computeNodeBreadths","relayout","computeLinkDepths","curvature","x0","x1","xi","x2","x3","interpolateNumber","y1"],"mappings":"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","file":"sankey.js","sourcesContent":["d3.sankey = function() {\n    var sankey = {},\n        nodeWidth = 24,\n        nodePadding = 8,\n        size = [1, 1],\n        nodes = [],\n        links = [];\n  \n    sankey.nodeWidth = function(_) {\n      if (!arguments.length) return nodeWidth;\n      nodeWidth = +_;\n      return sankey;\n    };\n  \n    sankey.nodePadding = function(_) {\n      if (!arguments.length) return nodePadding;\n      nodePadding = +_;\n      return sankey;\n    };\n  \n    sankey.nodes = function(_) {\n      if (!arguments.length) return nodes;\n      nodes = _;\n      return sankey;\n    };\n  \n    sankey.links = function(_) {\n      if (!arguments.length) return links;\n      links = _;\n      return sankey;\n    };\n  \n    sankey.size = function(_) {\n      if (!arguments.length) return size;\n      size = _;\n      return sankey;\n    };\n  \n    sankey.layout = function(iterations) {\n      computeNodeLinks();\n      computeNodeValues();\n      computeNodeBreadths();\n      computeNodeDepths(iterations);\n      computeLinkDepths();\n      return sankey;\n    };\n  \n    sankey.relayout = function() {\n      computeLinkDepths();\n      return sankey;\n    };\n  \n    sankey.link = function() {\n      var curvature = .5;\n  \n      function link(d) {\n        var x0 = d.source.x + d.source.dx,\n            x1 = d.target.x,\n            xi = d3.interpolateNumber(x0, x1),\n            x2 = xi(curvature),\n            x3 = xi(1 - curvature),\n            y0 = d.source.y + d.sy + d.dy / 2,\n            y1 = d.target.y + d.ty + d.dy / 2;\n        return \"M\" + x0 + \",\" + y0\n             + \"C\" + x2 + \",\" + y0\n             + \" \" + x3 + \",\" + y1\n             + \" \" + x1 + \",\" + y1;\n      }\n  \n      link.curvature = function(_) {\n        if (!arguments.length) return curvature;\n        curvature = +_;\n        return link;\n      };\n  \n      return link;\n    };\n  \n    // Populate the sourceLinks and targetLinks for each node.\n    // Also, if the source and target are not objects, assume they are indices.\n    function computeNodeLinks() {\n      nodes.forEach(function(node) {\n        node.sourceLinks = [];\n        node.targetLinks = [];\n      });\n      links.forEach(function(link) {\n        var source = link.source,\n            target = link.target;\n        if (typeof source === \"number\") source = link.source = nodes[link.source];\n        if (typeof target === \"number\") target = link.target = nodes[link.target];\n        source.sourceLinks.push(link);\n        target.targetLinks.push(link);\n      });\n    }\n  \n    // Compute the value (size) of each node by summing the associated links.\n    function computeNodeValues() {\n      nodes.forEach(function(node) {\n        node.value = Math.max(\n          d3.sum(node.sourceLinks, value),\n          d3.sum(node.targetLinks, value)\n        );\n      });\n    }\n  \n    // Iteratively assign the breadth (x-position) for each node.\n    // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n    // nodes with no incoming links are assigned breadth zero, while\n    // nodes with no outgoing links are assigned the maximum breadth.\n    function computeNodeBreadths() {\n      var remainingNodes = nodes,\n          nextNodes,\n          x = 0;\n  \n      while (remainingNodes.length) {\n        nextNodes = [];\n        remainingNodes.forEach(function(node) {\n          node.x = x;\n          node.dx = nodeWidth;\n          node.sourceLinks.forEach(function(link) {\n            if (nextNodes.indexOf(link.target) < 0) {\n              nextNodes.push(link.target);\n            }\n          });\n        });\n        remainingNodes = nextNodes;\n        ++x;\n      }\n  \n      //\n      moveSinksRight(x);\n      scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n    }\n  \n    function moveSourcesRight() {\n      nodes.forEach(function(node) {\n        if (!node.targetLinks.length) {\n          node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n        }\n      });\n    }\n  \n    function moveSinksRight(x) {\n      nodes.forEach(function(node) {\n        if (!node.sourceLinks.length) {\n          node.x = x - 1;\n        }\n      });\n    }\n  \n    function scaleNodeBreadths(kx) {\n      nodes.forEach(function(node) {\n        node.x *= kx;\n      });\n    }\n  \n    function computeNodeDepths(iterations) {\n      var nodesByBreadth = d3.nest()\n          .key(function(d) { return d.x; })\n          .entries(nodes)\n          .map(function(d) { return d.values; });\n  \n      initializeNodeDepth();\n      resolveCollisions();\n      for (var alpha = 1; iterations > 0; --iterations) {\n        relaxRightToLeft(alpha *= .99);\n        resolveCollisions();\n        relaxLeftToRight(alpha);\n        resolveCollisions();\n      }\n  \n      function initializeNodeDepth() {\n        var ky = d3.min(nodesByBreadth, function(nodes) {\n          return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n        });\n  \n        nodesByBreadth.forEach(function(nodes) {\n          nodes.forEach(function(node, i) {\n            node.y = i;\n            node.dy = node.value * ky;\n          });\n        });\n  \n        links.forEach(function(link) {\n          link.dy = link.value * ky;\n        });\n      }\n  \n      function relaxLeftToRight(alpha) {\n        nodesByBreadth.forEach(function(nodes, breadth) {\n          nodes.forEach(function(node) {\n            if (node.targetLinks.length) {\n              var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n              node.y += (y - center(node)) * alpha;\n            }\n          });\n        });\n  \n        function weightedSource(link) {\n          return center(link.source) * link.value;\n        }\n      }\n  \n      function relaxRightToLeft(alpha) {\n        nodesByBreadth.slice().reverse().forEach(function(nodes) {\n          nodes.forEach(function(node) {\n            if (node.sourceLinks.length) {\n              var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n              node.y += (y - center(node)) * alpha;\n            }\n          });\n        });\n  \n        function weightedTarget(link) {\n          return center(link.target) * link.value;\n        }\n      }\n  \n      function resolveCollisions() {\n        nodesByBreadth.forEach(function(nodes) {\n          var node,\n              dy,\n              y0 = 0,\n              n = nodes.length,\n              i;\n  \n          // Push any overlapping nodes down.\n          //nodes.sort(ascendingDepth);\n          for (i = 0; i < n; ++i) {\n            node = nodes[i];\n            dy = y0 - node.y;\n            if (dy > 0) node.y += dy;\n            y0 = node.y + node.dy + nodePadding;\n          }\n  \n          // If the bottommost node goes outside the bounds, push it back up.\n          dy = y0 - nodePadding - size[1];\n          if (dy > 0) {\n            y0 = node.y -= dy;\n  \n            // Push any overlapping nodes back up.\n            for (i = n - 2; i >= 0; --i) {\n              node = nodes[i];\n              dy = node.y + node.dy + nodePadding - y0;\n              if (dy > 0) node.y -= dy;\n              y0 = node.y;\n            }\n          }\n        });\n      }\n  \n      function ascendingDepth(a, b) {\n        return a.y - b.y;\n      }\n    }\n  \n    function computeLinkDepths() {\n      nodes.forEach(function(node) {\n        var sy = 0, ty = 0;\n        node.sourceLinks.forEach(function(link) {\n          link.sy = sy;\n          sy += link.dy;\n        });\n        node.targetLinks.forEach(function(link) {\n          link.ty = ty;\n          ty += link.dy;\n        });\n      });\n  \n      function ascendingSourceDepth(a, b) {\n        return a.source.y - b.source.y;\n      }\n  \n      function ascendingTargetDepth(a, b) {\n        return a.target.y - b.target.y;\n      }\n    }\n  \n    function center(node) {\n      return node.y + node.dy / 2;\n    }\n  \n    function value(link) {\n      return link.value;\n    }\n  \n    return sankey;\n  };"]}