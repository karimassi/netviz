{"version":3,"sources":["network.js"],"names":["$","margin","width","top","svg","d3","select","append","attr","left","right","height","bottom","json","data","link","selectAll","simulation","force","links","id","style","on","ticked","nodes","enter","source","target","x","forceLink","d","forceManyBody","strength","forceCenter","y","node"],"mappings":"aAAAA,EAAE,WAEE,IAAAC,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAC,EAAU,IAAGD,EAAAA,EAACE,EAAD,IAAAF,EAAAA,EAAqCG,EAAEC,GAAAC,OAAA,YAApDC,OAAA,OAAAC,KACAN,QAAQA,EAAaO,EAAcC,GADnCF,KAEAG,SAASA,EAAaR,EAAaS,GAOlCL,OAAO,KAJRC,KAAO,YAQJK,aAAKZ,EAAA,IAAAA,EAAA,KAGRI,GAAAQ,KAAQ,0FAOR,SAAAC,GAPA,IAAIC,EAAOX,EAiBXY,UAAIC,QACCC,KADYJ,EACNK,OACFC,QAAiBb,OAAA,QAAoCc,MAAA,SAAA,QAIzDH,EAAMd,EACNkB,UAAUC,UAddT,KAAKA,EAAKU,OAiBXC,QACAV,OACKP,UAAyBA,KAAA,IAASkB,IAClClB,MAAK,OAAM,WACuBmB,GAAOC,gBAAhBd,EAAAU,OACzBhB,MAAK,OAAMH,GAAAwB,YAAcT,GAAQ,SAARU,GAAA,OAAAA,EAAAV,KAJ9BD,MAAAL,EAAAK,QAO+BD,MAAOY,SAAPzB,GAAA0B,gBAAAC,UAAA,MAC1BxB,MAAK,SAAMH,GAAA4B,YAAY/B,EAAA,EAAAS,EAAA,IAAEW,GAAA,MAvC9B,WAhBJP,EAgDSP,KAAK,KAAM,SAASsB,GAAK,OAAOA,EAAEJ,OAAOE,IACzCpB,KAAK,KAAM,SAASsB,GAAK,OAAOA,EAAEJ,OAAOQ,IACzC1B,KAAK,KAAM,SAASsB,GAAK,OAAOA,EAAEH,OAAOC,IACzCpB,KAAK,KAAM,SAASsB,GAAK,OAAOA,EAAEH,OAAOO,IAE9CC,EACK3B,KAAK,KAAM,SAAUsB,GAAK,OAAOA,EAAEF,EAAE,IACrCpB,KAAK,KAAM,SAASsB,GAAK,OAAOA,EAAEI,EAAE","file":"network.js","sourcesContent":["$(function() {\n\n    // set the dimensions and margins of the graph\n    var margin = {top: 10, right: 30, bottom: 30, left: 40},\n    width = 400 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom;\n\n    // append the svg object to the body of the page\n    var svg = d3.select(\"#network\")\n    .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    d3.json(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/data_network.json\", function( data) {\n\n    // Initialize the links\n    var link = svg\n    .selectAll(\"line\")\n    .data(data.links)\n    .enter()\n    .append(\"line\")\n        .style(\"stroke\", \"#aaa\")\n\n    // Initialize the nodes\n    var node = svg\n    .selectAll(\"circle\")\n    .data(data.nodes)\n    .enter()\n    .append(\"circle\")\n        .attr(\"r\", 20)\n        .style(\"fill\", \"#FF0000\")\n\n    // Let's list the force we wanna apply on the network\n    var simulation = d3.forceSimulation(data.nodes)                 // Force algorithm is applied to data.nodes\n        .force(\"link\", d3.forceLink()                               // This force provides links between nodes\n            .id(function(d) { return d.id; })                     // This provide  the id of a node\n            .links(data.links)                                    // and this the list of links\n        )\n        .force(\"charge\", d3.forceManyBody().strength(-400))         // This adds repulsion between nodes. Play with the -400 for the repulsion strength\n        .force(\"center\", d3.forceCenter(width / 2, height / 2))     // This force attracts nodes to the center of the svg area\n        .on(\"end\", ticked);\n\n    // This function is run at each iteration of the force algorithm, updating the nodes position.\n    function ticked() {\n    link\n        .attr(\"x1\", function(d) { return d.source.x; })\n        .attr(\"y1\", function(d) { return d.source.y; })\n        .attr(\"x2\", function(d) { return d.target.x; })\n        .attr(\"y2\", function(d) { return d.target.y; });\n\n    node\n        .attr(\"cx\", function (d) { return d.x+6; })\n        .attr(\"cy\", function(d) { return d.y-6; });\n    }\n\n    });\n\n})\n\n"]}