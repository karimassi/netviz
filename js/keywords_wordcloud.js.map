{"version":3,"sources":["keywords_wordcloud.js"],"names":["SequentialColorPicker","colors","_classCallCheck","this","index","color","length","WordCloud","id","svg","d3","select","concat","svgSize","undefined","processingId","activeWordGroup","setup","attr","y","words","processId","sizeY","transition","appearTransition","delay","duration","style","main_color","max","d","size","sizeX","append","layout","newGroup","selectAll","data","colorPicker","getColor","rotate","text","maxSize","cloud","x","map","w","padding","i","fontSize","Math","on","_this","drawWords","start","$","month_names","selector","TimeSelector","month","updateWords","month_int","json","then","Object","NUMBER_OF_WORDS","key","entries","sort","b","a","pairs","slice","toUpperCase","setValue"],"mappings":"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","file":"keywords_wordcloud.js","sourcesContent":["class SequentialColorPicker {\n  constructor(colors) {\n    this.colors = colors;\n    this.index = 0;\n  }\n\n  getColor() {\n    const color = this.colors[this.index];\n    this.index = (this.index + 1) % this.colors.length;\n    return color;\n  }\n}\n\nclass WordCloud {\n  constructor(id) {\n    this.id = id;\n    this.svg = d3.select(`#${id}`);\n    this.svgSize = undefined;\n    this.processingId = 0;\n    this.activeWordGroup = undefined;\n    this.setup();\n  }\n\n  setup() {\n    const main_color = 'whitesmoke';\n    let [sizeX, sizeY] = [700, 500];\n    this.svg.attr('viewBox', `0 0 ${sizeX} ${sizeY}`);\n    this.svgSize = {\n      x: sizeX,\n      y: sizeY\n    };\n  }\n\n  drawWords(words, layout, processId) {\n    if(processId === this.processingId) {\n      let appearTransition = d3.transition();\n\n      if(this.activeWordGroup !== undefined) {\n        appearTransition = appearTransition.delay(1000);\n        this.activeWordGroup\n          .transition()\n          .duration(1000)\n          .style('opacity', 0)\n          .remove();\n      }\n      const colorPicker = new SequentialColorPicker([\n        'darkred', '#ff0000', 'whitesmoke', 'gray', '#ffe6e6']);\n      const maxSize = d3.max(words, d => d.size);\n      const newGroup = this.svg\n        .append('g')\n        .attr('transform', `translate(${layout.size()[0] / 2} ${layout.size()[1] / 2})`);\n      this.activeWordGroup = newGroup;\n      this.activeWordGroup\n        .selectAll('text')\n          .data(words)\n          .enter()\n          .append('text')\n            .attr('text-anchor', 'middle')\n            .attr('fill', (d, i) => colorPicker.getColor())\n            .attr('transform', d =>\n              `translate(${d.x}, ${d.y}) rotate(${d.rotate})`)\n            .style('opacity', 0)\n            .style('font-size', d => `${d.size}px`)\n            .text(d => d.text)\n            .transition(appearTransition)\n            .duration(d =>  1000 + (1 - d.size / maxSize) * 5000)\n            .style('opacity', 1);\n    }\n  }\n\n  updateWords(words) {\n    const layout = d3.layout.cloud()\n      .size([this.svgSize.x, this.svgSize.y])\n      .words(words.map(w => ({\n        text: w\n      })))\n      .padding(10)\n      .rotate((d, i) => /*~~(Math.random() * 2)*/ (i % 2) * 90)\n      .fontSize((d, i) => Math.max(15, 60 - i * 3))\n      .on('end', d => this.drawWords(d, layout, this.processingId));\n    this.processingId++;\n    layout.start();\n  }\n}\n\n$(() => {\n  const NUMBER_OF_WORDS = 30;\n  const month_names = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n  const cloud = new WordCloud(\n    'topic-wordcloud');\n\n\n  let words = {};\n  for(let i = 1; i <= 12; i++) {\n    words[i] = [];\n  }\n\n  const selector = new TimeSelector(\n    'word-cloud-time-selection',\n    [1, 12],\n    month => cloud.updateWords(words[month]),\n    60000,\n    'int',\n    month_int => month_names[month_int - 1]\n  );\n\n  d3.json('data/keywords_per_month.json').then(data => {\n    Object.keys(data).map(key => {\n      let pairs = Object.entries(data[key]);\n      pairs.sort((a, b) => b[1] - a[1]);\n\n      words[key] = pairs.map(x => x[0]).slice(0, NUMBER_OF_WORDS).map(x => x[0].toUpperCase() + x.slice(1));\n    });\n\n    selector.setValue(1);\n  });\n});\n"]}