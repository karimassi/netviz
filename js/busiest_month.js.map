{"version":3,"sources":["busiest_month.js"],"names":["BusiestMonthStackedBarPlot","svgElement","_classCallCheck","this","svg","currentData","MONTHS","width","height","setup","d3","scaleBand","x","xScale","append","attr","call","axisBottom","selectAll","style","scaleLinear","domain","range","y","yScale","axisLeft","ticks","transition","duration","scaleOrdinal","columns","stack","keys","types","slice","select","createColorRange","data","enter","initiateBars","d","bandwidth","concat","createYaxis","subgroupValue","color","subgroupName","mousemove","event","tooltip","createXaxis","createTooltips","loadedData","plot","showInitialPlot","key","data_path","forEach","month","total","parseInt","movie","parentNode","datum","updateData","instentiateBusiestMonth","csv","then","show","delay","map"],"mappings":"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","file":"busiest_month.js","sourcesContent":["class BusiestMonthStackedBarPlot {\n    constructor(svgElement) {\n        this.svg = svgElement;\n        this.currentData = {};\n        this.MONTHS = {};\n        this.width = 0;\n        this.height = 0;\n        this.setup();\n    }\n\n    xScale() {\n        return d3.scaleBand()\n        .domain(this.MONTHS)\n        .range([ 0, this.width ])\n        .padding(0.4);\n    }\n\n    createXaxis() {\n        var x = this.xScale(this.width) ;\n\n        this.svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n        .call(d3.axisBottom(x))\n        .selectAll(\"text\")\n            .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n            .style(\"text-anchor\", \"end\")\n            .style('fill', 'whitesmoke')\n            .style('font-size', '1rem');\n    }\n\n    yScale() {\n        return d3.scaleLinear()\n        .domain([0,2500])\n        .range([ this.height, 0]);\n    }\n\n    createYaxis() {\n        var y = this.yScale(this.height);\n\n        this.svg.append(\"g\")\n        .attr(\"transform\", \"translate(40,0)\")\n        .call(d3.axisLeft(y).ticks(5))\n        .selectAll(\"text\")\n        .transition().duration(100)\n          .style('fill', 'whitesmoke')\n          .style('font-size', '0.7rem');\n    }\n\n    createColorRange() {\n        return d3.scaleOrdinal()\n                .domain(['Movies', 'Shows'])\n                .range(['#DB0000', '#623A63']);\n    }\n\n    createStackedData() {\n        var types = this.currentData.columns.slice(1) ;\n        return d3.stack().keys(types)(this.currentData);\n    }\n\n    createTooltips() {\n        d3.select('div#busiest-month')\n        .style(\"opacity\", 0)\n        .attr(\"class\", \"tooltip\")\n        .style(\"background-color\", \"white\")\n        .style(\"border\", \"solid\")\n        .style(\"border-width\", \"1px\")\n        .style(\"border-radius\", \"5px\")\n        .style(\"padding\", \"10px\")\n    }\n\n    initiateBars() {\n        var x = this.xScale();\n        var y = this.yScale();\n        var color = this.createColorRange();\n\n        this.svg.append(\"g\")\n        .selectAll(\"g\")\n        // Enter in the stack data = loop key per key = group per group\n        .data(this.MONTHS)\n        .enter().append(\"g\")\n            .attr(\"fill\", '#ffffff')\n            .attr(\"x\", function(d) { return x(d); })\n            .attr(\"y\", function(d) { return y(0); })\n            .attr(\"height\", function(d) { return y(0); })\n            .attr(\"width\",x.bandwidth());\n    }\n\n    setup() {\n        this.width = 1350 ;\n        this.height = 380;\n        this.svg.attr('viewBox', `0 0 ${this.width} ${this.height}`);\n\n        this.initiateBars() ;\n    }\n\n    updateData() {\n\n        //this.currentData.forEach(d=> d.total = parseInt(d.movie)+parseInt(d.show));\n        var stackedData = this.createStackedData();\n        var types = this.currentData.columns.slice(1);\n        var color = this.createColorRange();\n\n        var transition = d3.transition().duration(2000);\n\n        var x = this.xScale(); \n        var y = this.yScale();\n\n        this.createXaxis();\n        this.createYaxis();\n\n        var tooltip = d3.select('div#busiest-month');\n\n        this.createTooltips();\n\n        //setup tooltip\n        var mouseover = function(d) {\n            var subgroupName = d3.select(this.parentNode).datum().key;\n            var subgroupValue = d.data[subgroupName];\n            tooltip\n                .html(subgroupName + \"<br>\" + \"Count: \" + subgroupValue)\n                .style('color', 'black')\n                .transition().duration(2100)\n                .style('opacity', 1)\n          }\n        var mousemove = function(d) {\n            var x = d3.event.x,\n            y = d3.event.y;\n            tooltip\n            .style(\"left\", (x + 10) + \"px\") // It is important to put the +10: other wise the tooltip is exactly where the point is an it creates a weird effect\n            .style(\"top\", y + \"px\")\n            .style('opacity',0)\n        }\n        var mouseleave = function(d) {\n            tooltip.style(\"opacity\", 0)\n        }\n\n\n        this.svg.append(\"g\")\n        .selectAll(\"g\")\n        // Enter in the stack data = loop key per key = group per group\n        .data(stackedData)\n        .enter().append(\"g\")\n            .attr(\"fill\", function(d) { return color(d.key); })\n            .selectAll(\"rect\")\n            // enter a second time = loop subgroup per subgroup to add all rectangles\n            .data(function(d) { return d; })\n            .enter().append(\"rect\")\n            .attr(\"x\", function(d) { return x(d.data.month); })\n            .attr(\"y\", function(d) { return y(this.height); })\n            .attr(\"height\", function(d) { return y(0); })\n            .attr(\"width\",x.bandwidth())\n            .on(\"mouseover\", mouseover)\n            .on(\"mousemove\", mousemove)\n            .on(\"mouseleave\", mouseleave)\n            .transition(transition)\n            .attr(\"y\", function(d) { return y(d[1]); })\n            .attr(\"height\", function(d) { return y(d[0]) - y(d[1]); })\n            //.delay(function(d,i) {return i*200})\n        \n    }\n    }\n\n\nfunction instentiateBusiestMonth(svg,data_path) {\n\n    let loadedData = {};\n\n    let plot = new BusiestMonthStackedBarPlot(svg);\n\n    function showInitialPlot() {\n        svg.style('opacity', 0);\n        svg.transition()\n            .delay(1000)\n            .duration(600)\n            .style('opacity', 1);\n    }\n\n    d3.csv(data_path).then(data => {\n        loadedData = data;\n        loadedData.forEach(d=> d.total = parseInt(d.movie)+parseInt(d.show));\n        \n        showInitialPlot();\n        plot.currentData = loadedData;\n        plot.MONTHS = d3.map(loadedData, function(d){return(d.month)}).keys();\n\n        plot.updateData();\n    });\n}\n"]}