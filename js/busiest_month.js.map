{"version":3,"sources":["busiest_month.js"],"names":["BusiestMonthStackedBarPlot","svgElement","_classCallCheck","this","svg","currentData","MONTHS","width","height","setup","d3","scaleBand","x","xScale","append","attr","call","axisBottom","selectAll","style","scaleLinear","domain","range","y","yScale","transition","duration","scaleOrdinal","columns","types","slice","stack","keys","select","createColorRange","data","enter","initiateBars","d","bandwidth","color","concat","createXaxis","subgroupName","tooltip","subgroupValue","event","createYaxis","mouseleave","createTooltips","instentiateBusiestMonth","loadedData","stackedData","showInitialPlot","key","delay","data_path","then","month","forEach","total","parseInt","movie","parentNode","datum","html","updateData","plot","csv","show","map"],"mappings":"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","file":"busiest_month.js","sourcesContent":["class BusiestMonthStackedBarPlot {\n    constructor(svgElement) {\n        this.svg = svgElement;\n        this.currentData = {};\n        this.MONTHS = {};\n        this.width = 0;\n        this.height = 0;\n        this.setup();\n    }\n\n    xScale() {\n        return d3.scaleBand()\n        .domain(this.MONTHS)\n        .range([ 0, this.width ])\n        .padding(0.4);\n    }\n\n    createXaxis() {\n        var x = this.xScale(this.width) ;\n\n        this.svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n        .call(d3.axisBottom(x))\n        .selectAll(\"text\")\n            .style(\"text-anchor\", \"middle\")\n            .style('fill', 'whitesmoke')\n            .style('font-size', '1rem');\n    }\n\n    yScale() {\n        return d3.scaleLinear()\n        .domain([0,2500])\n        .range([ this.height, 0]);\n    }\n\n    createYaxis() {\n        var y = this.yScale(this.height);\n\n        this.svg.append(\"g\")\n        .attr(\"transform\", \"translate(40,0)\")\n        .call(d3.axisLeft(y).ticks(4))\n        .selectAll(\"text\")\n        .transition().duration(100)\n          .style('fill', 'whitesmoke')\n          .style('font-size', '0.7rem');\n    }\n\n    createColorRange() {\n        return d3.scaleOrdinal()\n                .domain(['Movies', 'Shows'])\n                .range(['#DB0000', '#623A63']);\n    }\n\n    createStackedData() {\n        var types = this.currentData.columns.slice(1) ;\n        return d3.stack().keys(types)(this.currentData);\n    }\n\n    createTooltips() {\n        d3.select('div#busiest-month')\n        .style(\"opacity\", 0)\n        .attr(\"class\", \"tooltip\")\n        .style(\"background-color\", \"white\")\n        .style(\"border\", \"solid\")\n        .style(\"border-width\", \"1px\")\n        .style(\"border-radius\", \"5px\")\n        .style(\"padding\", \"10px\")\n    }\n\n    initiateBars() {\n        var x = this.xScale();\n        var y = this.yScale();\n        var color = this.createColorRange();\n\n        this.svg.append(\"g\")\n        .selectAll(\"g\")\n        // Enter in the stack data = loop key per key = group per group\n        .data(this.MONTHS)\n        .enter().append(\"g\")\n            .attr(\"fill\", '#ffffff')\n            .attr(\"x\", function(d) { return x(d); })\n            .attr(\"y\", function(d) { return y(0); })\n            .attr(\"height\", function(d) { return y(0); })\n            .attr(\"width\",x.bandwidth());\n    }\n\n    setup() {\n        this.width = 1350 ;\n        this.height = 380;\n        this.svg.attr('viewBox', `0 0 ${this.width} ${this.height}`);\n\n        this.initiateBars() ;\n    }\n\n    updateData() {\n\n        //this.currentData.forEach(d=> d.total = parseInt(d.movie)+parseInt(d.show));\n        var stackedData = this.createStackedData();\n        var types = this.currentData.columns.slice(1);\n        var color = this.createColorRange();\n\n        var transition = d3.transition().duration(2000);\n\n        var x = this.xScale(); \n        var y = this.yScale();\n\n        this.createXaxis();\n        this.createYaxis();\n\n        var tooltip = d3.select('div#busiest-month');\n\n        this.createTooltips();\n\n        //setup tooltip\n        var mouseover = function(d) {\n            var subgroupName = d3.select(this.parentNode).datum().key;\n            var subgroupValue = d.data[subgroupName];\n            tooltip\n                .html(subgroupName + \"<br>\" + \"Count: \" + subgroupValue)\n                .style('color', 'black')\n                .transition().duration(2100)\n                .style('opacity', 1)\n          }\n        var mousemove = function(d) {\n            var x = d3.event.x,\n            y = d3.event.y;\n            tooltip\n            .style(\"left\", (x + 10) + \"px\") // It is important to put the +10: other wise the tooltip is exactly where the point is an it creates a weird effect\n            .style(\"top\", y + \"px\")\n            .style('opacity',0)\n        }\n        var mouseleave = function(d) {\n            tooltip.style(\"opacity\", 0)\n        }\n\n\n        this.svg.append(\"g\")\n        .selectAll(\"g\")\n        // Enter in the stack data = loop key per key = group per group\n        .data(stackedData)\n        .enter().append(\"g\")\n            .attr(\"fill\", function(d) { return color(d.key); })\n            .selectAll(\"rect\")\n            // enter a second time = loop subgroup per subgroup to add all rectangles\n            .data(function(d) { return d; })\n            .enter().append(\"rect\")\n            .attr(\"x\", function(d) { return x(d.data.month); })\n            .attr(\"y\", function(d) { return y(this.height); })\n            .attr(\"height\", function(d) { return y(0); })\n            .attr(\"width\",x.bandwidth())\n            .on(\"mouseover\", mouseover)\n            .on(\"mousemove\", mousemove)\n            .on(\"mouseleave\", mouseleave)\n            .transition(transition)\n            .attr(\"y\", function(d) { return y(d[1]); })\n            .attr(\"height\", function(d) { return y(d[0]) - y(d[1]); })\n            //.delay(function(d,i) {return i*200})\n        \n    }\n    }\n\n\nfunction instentiateBusiestMonth(svg,data_path) {\n\n    let loadedData = {};\n\n    let plot = new BusiestMonthStackedBarPlot(svg);\n\n    function showInitialPlot() {\n        svg.style('opacity', 0);\n        svg.transition()\n            .delay(1000)\n            .duration(600)\n            .style('opacity', 1);\n    }\n\n    d3.csv(data_path).then(data => {\n        loadedData = data;\n        loadedData.forEach(d=> d.total = parseInt(d.movie)+parseInt(d.show));\n        \n        showInitialPlot();\n        plot.currentData = loadedData;\n        plot.MONTHS = d3.map(loadedData, function(d){return(d.month)}).keys();\n\n        plot.updateData();\n    });\n}\n"]}