{"version":3,"sources":["exploratory-page.js"],"names":["map","id","callback","mapDiv","$","concat","vectorMap","hoverColor","backgroundColor","regionsSelectable","regionsSelectableOne","regionStyle","fill","fill-opacity","initial","selectedHover","zoomMax","selected","onRegionSelected","event","code","isSelected","codeName","getRegionName","iterable","reducers","filterFunc","reducedValues","reducerNames","Object","keys","forEach","name","undefined","el","filterMultiReduce","str","x","ExploratoryTool","mapId","sideBarId","statisticsBarId","audioPlotId","selectorPlotData","exploratoryDataPath","countriesPath","_classCallCheck","this","country","interval","audioBarPlot","idToCountryMapping","parseArrayOfInts","statisticsBar","preparePlots","startEploratoryDataLoading","startLoadingMappings","exploratoryData","data","entries","sort","a","b","values","topAudio","countryToIdMapping","startselectionElementCreation","_i","_sampleLanguages","length","language","slice","updateLabels","fillAudioPlot","sideBar","arr","filter","title","join","html","Math","round","toFixed","countryId","aggregates","topMovies","topMoviesReducer","topShows","topShowsReducer","numberOfTitles","averageNumberOfSeasons","attrAverageDataReducer","entry","countries","has","_this","displayData","handleNoData","agg","audio","attrName","isNaN","attrValue","k","SortedCollection","metacritic","duration","tryToInsert","selectorDataFilepath","_this2","d3","csv","then","points","i","push","month","Date","count","log","d","RangeSelector","left","right","updateData","date","f","getDate","getMonth","getFullYear","synonyms","United Kingdom","United States","United Arab Emirates","synonym","SimpleBarPlot","exploratoryDataFilepath","_this3","parseFloat","Set","countryFilepath","_this4","dataPoint"],"mappings":"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","file":"exploratory-page.js","sourcesContent":["function map(id, callback) {\n  const mapDiv = $(`#${id}`);\n  mapDiv.vectorMap({\n    map: 'world_mill',\n    hoverColor: false,\n    backgroundColor: '#000',\n    regionsSelectable: true,\n    regionsSelectableOne: true,\n    regionStyle: {\n      initial: {\n        fill: 'gray',\n        \"fill-opacity\": 1,\n      },\n      hover: {\n        \"fill-opacity\": 0.8,\n      },\n      selected: {\n        fill: '#DB0000'\n      },\n      selectedHover: {\n        \"fill-opacity\": 1,\n      }\n    },\n    zoomMax: 8,\n    zoomMin: 1,\n    zoomStep: 1.6,\n    onRegionSelected: ((event, code, isSelected) => {\n      if (isSelected) {\n        const map = mapDiv.vectorMap('get', 'mapObject');\n        const codeName = map.getRegionName(code);\n        callback(codeName);\n      }\n    })\n  });\n}\n\n/**\n * Does reduction using multiple reducers at the same time\n *  and filters results beforehand in a single pass\n */\nfunction filterMultiReduce(iterable, reducers, filterFunc) {\n  const reducedValues = {};\n  const reducerNames = Object.keys(reducers);\n  reducerNames.forEach(name => reducedValues[name] = undefined);\n  iterable.forEach(el => {\n    if(filterFunc(el)) {\n      reducerNames.forEach(name => {\n        reducedValues[name] = reducers[name](reducedValues[name], el);\n      });\n    }\n  });\n  return reducedValues;\n}\n\n/**\n * Maps string of ints with comma separator to array of int\n */\nfunction parseArrayOfInts(str) {\n  return str.split(',').map(x => +x);\n}\n\nclass ExploratoryTool {\n  constructor(mapId, sideBarId, statisticsBarId, audioPlotId,\n      selectorPlotData, exploratoryDataPath, countriesPath) {\n    this.exploratoryData = undefined;\n    this.selected = {\n      country: undefined,\n      interval: undefined\n    };\n    this.audioBarPlot = undefined;\n    this.idToCountryMapping = undefined;\n    this.countryToIdMapping = undefined;\n    this.sideBar = $(`#${sideBarId}`);\n    this.statisticsBar = $(`#${statisticsBarId}`);\n\n    this.preparePlots(audioPlotId);\n    this.startEploratoryDataLoading(exploratoryDataPath)\n    this.startselectionElementCreation(mapId, selectorPlotData);\n    this.startLoadingMappings(countriesPath);\n  }\n\n  fillAudioPlot(data) {\n    this.fillAudioWithNonAppearing(data);\n    const topAudio = Object.entries(data).sort((a, b) => b[1] - a[1])\n      .slice(0, 5);\n    const values = topAudio.map(x => x[1]);\n    const labels = topAudio.map(x => x[0]);\n    this.audioBarPlot.updateData(values);\n    this.audioBarPlot.updateLabels(labels);\n  }\n\n  handleNoData() {\n    this.sideBar.html('No data available');\n    this.statisticsBar.html('No data available');\n    this.fillAudioPlot({});\n  }\n\n  fillAudioWithNonAppearing(data) {\n    const sampleLanguages = [\n      'English', 'Hindi', 'Spanish', 'Japanese', 'Italian', 'Korean', 'Mandarin'\n    ];\n    for(const language of sampleLanguages) {\n      if(data[language] === undefined) {\n        data[language] = 0;\n      }\n    }\n  }\n\n  displayData(data) {\n    // this.fillAudioWithNonAppearing(data['audioCount']);\n\n    if(data['audioCount'] === undefined) {\n      data['audioCount'] = {};\n    }\n    this.fillAudioPlot(data['audioCount']);\n\n    // this.showMovieBarPlot.updateData(data['numberOfTitles']);\n    this.sideBar.html(`\n      Top movies:\n      <ol>\n        ${\n          data['topMovies'] === undefined ? 'No data available' :\n            data['topMovies'].arr.filter(x => x !== undefined).map(x => `<li>${x.title}</li>`).join('\\n')\n        }\n      </ol>\n      Top TV shows:\n      <ol>\n        ${\n          data['topMovies'] === undefined ? 'No data available' :\n            data['topShows'].arr.filter(x => x !== undefined).map(x => `<li>${x.title}</li>`).join('\\n')\n        }\n      </ol>\n    `);\n    this.statisticsBar.html(`\n      <p>Number of movies: <b>${data['numberOfTitles'][0]}</b></p>\n\n      <p>Average length of a movie: <b>${Math.round(data['averageDuration'][0] / data['averageDuration'][1])} minutes</b></p>\n\n      <p>Number of TV Shows: <b>${data['numberOfTitles'][1]}</b></p>\n\n      <p>Average duration of a TV show: <b>${(data['averageNumberOfSeasons'][0] / data['averageNumberOfSeasons'][1]).toFixed(2)} seasons</b></p>\n    `)\n  }\n\n  updateData() {\n    if(this.exploratoryData !== undefined &&\n        this.selected.country !== undefined &&\n        this.selected.interval !== undefined) {\n\n      const countryId = this.countryToIdMapping[this.selected.country];\n      if(countryId !== undefined) {\n\n        const filterCondition = entry => entry.countries.has(countryId) &&\n          entry['release date on Netflix'] >= this.selected.interval[0] &&\n          entry['release date on Netflix'] <= this.selected.interval[1];\n\n        const aggregates = filterMultiReduce(this.exploratoryData, {\n            'topMovies': this.topMoviesReducer(5),\n            'topShows': this.topShowsReducer(5),\n            'numberOfTitles': this.countMoviesShows,\n            'averageDuration': this.attrAverageDataReducer('duration'),\n            'averageNumberOfSeasons': this.attrAverageDataReducer('number of seasons'),\n            'audioCount': this.countAudio\n          },\n          filterCondition);\n        this.displayData(aggregates);\n      }\n      else {\n        this.handleNoData();\n      }\n    }\n    else {\n      this.handleNoData();\n    }\n  }\n\n  countAudio(agg, title) {\n    if(agg === undefined) {\n      agg = {};\n    }\n    const audio = title.audio;\n    if(agg[audio] === undefined) {\n      agg[audio] = 1;\n    }\n    else {\n      agg[audio] += 1\n    }\n    return agg;\n  }\n\n  attrAverageDataReducer(attrName) {\n    return (agg, title) => {\n      if(agg === undefined) {\n        agg = [0, 0];\n      }\n      const attrValue = +title[attrName];\n      if(!isNaN(attrValue) && attrValue > 0) {\n        agg[0] += +attrValue;\n        agg[1]++;\n      }\n      return agg;\n    }\n  }\n\n  countMoviesShows(agg, title) {\n    if(agg === undefined) {\n      agg = [0, 0];\n    }\n    if(!isNaN(title.duration)) {\n      agg[0]++;\n    }\n    else if(!isNaN(title['number of seasons'])) {\n      agg[1]++;\n    }\n    return agg;\n  }\n\n  topMoviesReducer(k) {\n    return (agg, title) => {\n      if(agg === undefined) {\n        agg = new SortedCollection(k, (a, b) => a.metacritic > b.metacritic);\n      }\n      if(!isNaN(title.duration) && !isNaN(title.metacritic)) {\n        agg.tryToInsert(title);\n      }\n      return agg;\n    }\n  }\n\n  topShowsReducer(k) {\n    return (agg, title) => {\n      if(agg === undefined) {\n        agg = new SortedCollection(k, (a, b) => a.metacritic > b.metacritic);\n      }\n      if(!isNaN(title['number of seasons']) && !isNaN(title.metacritic)) {\n        agg.tryToInsert(title);\n      }\n      return agg;\n    }\n  }\n\n  /**\n   * Loads data for the background of selector and creates the map\n   */\n  startselectionElementCreation(mapId, selectorDataFilepath) {\n    d3.csv(selectorDataFilepath).then(data => {\n      const points = [];\n\n      for(let i = 0; i < data.length; i++) {\n        points.push({\n          month: new Date(data[i]['release month']),\n          count: (data[i].count > 0) ? Math.log(data[i].count) : 0\n        });\n      }\n\n      const f = d => ('0' + d).slice(-2);\n\n      const selector = new RangeSelector(\n        'exporatory-time-selection',\n        points,\n        (left, right) => {\n          this.selected.interval = [left, right];\n          this.updateData();\n        },\n        date => `${f(date.getDate())}-${f(date.getMonth() + 1)}-${f(date.getFullYear())}`);\n\n        const synonyms = {\n          'United Kingdom': 'UK',\n          'United States': 'USA',\n          'United Arab Emirates': 'UAE'\n        };\n\n        map(mapId, country => {\n          const synonym = synonyms[country];\n          if(synonym !== undefined) {\n            country = synonym;\n          }\n          if(country !== this.selected.country) {\n            this.selected.country = country;\n            this.updateData();\n          }\n        });\n    });\n  }\n\n  preparePlots(audioPlotId) {\n    this.audioBarPlot = new SimpleBarPlot(\n      audioPlotId,\n      ['English', 'Japanese', 'Chinese', 'Portugese', 'Latin'],\n      1200,\n      380,\n      100\n    );\n  }\n\n  /**\n   * Loads title data\n   */\n  startEploratoryDataLoading(exploratoryDataFilepath) {\n    d3.csv(exploratoryDataFilepath).then(data => {\n      this.exploratoryData = data;\n      this.exploratoryData.forEach(d => {\n        d.imdb = parseFloat(d.imdb);\n        d.metacritic = parseFloat(d.metacritic);\n        d.duration = parseFloat(d.duration);\n        d['number of seasons'] = parseFloat(d['number of seasons']);\n        d['release date on Netflix'] = new Date(d['release date on Netflix']);\n        d.countries = new Set(parseArrayOfInts(d.countries));\n      });\n    });\n  }\n\n  /**\n   * Load countries and their ids\n   */\n  startLoadingMappings(countryFilepath) {\n    d3.csv(countryFilepath).then(data => {\n      this.idToCountryMapping = {};\n      this.countryToIdMapping = {};\n      data.forEach(dataPoint => {\n        this.idToCountryMapping[+dataPoint.id] = dataPoint.name;\n        this.countryToIdMapping[dataPoint.name] = +dataPoint.id;\n      });\n    });\n  }\n}\n\n$(() => {\n  const exploratoryTool = new ExploratoryTool(\n    'exploratory-tool-world-map',\n    'exploratory-side-bar',\n    'statistics-side-bar',\n    'exploratory-tool-audio-bar-plot',\n    'data/release_density_per_month.csv',\n    'data/exploratory_data.csv',\n    'data/countries.csv');\n});\n"]}