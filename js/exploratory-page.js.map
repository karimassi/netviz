{"version":3,"sources":["exploratory-page.js"],"names":["map","id","callback","mapDiv","$","concat","vectorMap","hoverColor","backgroundColor","regionsSelectable","regionsSelectableOne","regionStyle","fill","fill-opacity","initial","selectedHover","zoomMax","selected","onRegionSelected","event","code","isSelected","codeName","getRegionName","iterable","reducers","filterFunc","reducedValues","reducerNames","Object","keys","forEach","name","undefined","el","filterMultiReduce","str","x","ExploratoryTool","mapId","sideBarId","statisticsBarId","audioPlotId","selectorPlotData","exploratoryDataPath","countriesPath","_classCallCheck","this","country","interval","audioBarPlot","idToCountryMapping","parseArrayOfInts","statisticsBar","preparePlots","startEploratoryDataLoading","startLoadingMappings","fillAudioWithNonAppearing","data","sort","a","b","slice","countryToIdMapping","sideBar","updateData","values","labels","html","fillAudioPlot","_i","_sampleLanguages","length","language","arr","filter","title","join","sampleLanguages","Math","round","toFixed","countryId","aggregates","exploratoryData","topMovies","topMoviesReducer","topShows","topShowsReducer","numberOfTitles","countMoviesShows","averageDuration","attrAverageDataReducer","averageNumberOfSeasons","audioCount","countAudio","entry","countries","has","_this","displayData","handleNoData","filterCondition","audio","agg","attrName","isNaN","attrValue","k","SortedCollection","metacritic","duration","tryToInsert","selectorDataFilepath","_this2","d3","csv","then","points","i","count","log","f","d","RangeSelector","left","right","date","getDate","getMonth","getFullYear","synonyms","United Kingdom","United States","United Arab Emirates","synonym","SimpleBarPlot","push","month","_this3","exploratoryDataFilepath","imdb","parseFloat","Date","Set","countryFilepath","_this4","dataPoint"],"mappings":"mZAAA,SAASA,IAAIC,EAAIC,GACf,IAAMC,EAASC,EAAC,IAAAC,OAAKJ,IACrBE,EAAOG,UAAU,CACfN,IAAK,aACLO,YAAY,EACZC,gBAAiB,OACjBC,mBAAmB,EACnBC,sBAAsB,EAP1BC,YAAiBT,CACTC,QAASC,CACTQ,KAACN,OACFO,eADY,GAGfL,MAAAA,CACAC,eAAmB,IAEnBE,SAAW,CACTG,KAAO,WAELC,cAAA,CAHSF,eAAA,IAKJG,QALI,EAQXC,QAAAA,EACEL,SAAM,IADEM,iBARC,SAAAC,EAAAC,EAAAC,GAWXN,IAAeO,EACbnB,EAAgBG,UAAA,MAAA,aADHiB,cAAAH,GAjBFlB,EAAAoB,OA4BXpB,SAAAA,kBAAAsB,EAAAC,EAAAC,GACD,IAAAC,EAAA,GACFC,EAAAC,OAAAC,KAAAL,GAQL,OAtCmBG,EAAjBG,QAAA,SAAAC,GAAA,OAAAL,EAAAK,QAAAC,IAgCDT,EAAAO,QAAA,SAAAG,GAEDR,EAAAQ,IACAN,EAAAG,QAAA,SAAAC,GACAL,EAAAK,GAAAP,EAAAO,GAAAL,EAAAK,GAAAE,OAESC,EAIPX,SAAAA,iBAAiBY,GACf,OAAGV,EAAAA,MAAWQ,KAAKlC,IAAA,SAAAqC,GAAA,OAAAA,I,IAGhBC,gB,WACF,SAAAA,EAAAC,EAAAC,EAAAC,EAAAC,EALHC,EAAAC,EAAAC,GAAAC,gBAAAC,KAAAT,GAOAS,KAAOpB,qBAAPM,EACDc,KAAA9B,SAAA,CAED+B,aAAAf,EACAgB,cAAAhB,GAcIc,KAAKG,kBAAejB,EACpBc,KAAKI,wBAAqBlB,EAb9Bc,KAASK,wBAATnB,EACEc,KAAOX,QAAUhC,EAAA,IAAAC,OAAKL,IAAK+C,KAAAM,cAAAjD,EAAA,IAAAC,OAAAoC,IAC5BM,KAAAO,aAAAZ,GAiBGK,KAAKQ,2BAA2BX,GAf9BN,KAAAA,8BAgBiCC,EAAOI,GAf5CI,KAAAS,qBAAYjB,G,kDAKRU,SAAUhB,GAFIc,KAAhBU,0BAAAC,GAIA,IAAKR,EAALrB,OAAoBI,QAApByB,GAAAC,KAAA,SAAAC,EAAAC,GAAA,OAAAA,EAAA,GAAAD,EAAA,KACAE,MAAKX,EAAAA,GACAY,EAAAA,EAAL/D,IAA0BiC,SAAAA,GAAAA,OAAAA,EAA1B,KACK+B,EAAU5D,EAACJ,IAAKwC,SAAAA,GAAAA,OAAAA,EAAAA,KACrBO,KAAKM,aAALY,WAAsBC,GAEtBnB,KAAKO,aAAaZ,aAAlByB,K,0BAOJ,WACApB,KAAAiB,QAAAI,KAAA,qBAgBIrB,KAAKM,cAAce,KAAK,qBACxBrB,KAAKsB,cAAc,M,uCAZnB,SAAwBrE,GACK,IADA,IACAsE,EAAA,EAAAC,EADA,CAAA,UAA7B,QAAA,UAAA,WAAA,UAAA,SAAA,YAC6BD,EAAAC,EAAAC,OAAAF,IAAA,CAAA,IAAAG,EAAAF,EAAAD,QAA7BrC,IAAAyB,EAAAe,KACAf,EAAKR,GAAae,M,yBAgCpB,SAAYP,QAzBZzB,IA0BKyB,EA1BL,aACEA,EAAA,WAAkB,IAElBX,KAAAsB,cAAKA,EAAL,YAGFtB,KAAAiB,QAAAI,KAAA,4CAAA/D,YAIF4B,IAAAyB,EAAA,UAAA,oBA0BYA,EAAI,UAAcgB,IAAIC,OAAO,SAAAtC,GAAC,YAAUJ,IAANI,IAAiBrC,IAAI,SAAAqC,GAAC,MAAA,OAAAhC,OAAWgC,EAAEuC,MAAb,WAA2BC,KAAK,MA9BlG,4DAAAxE,YASE4B,IAAAyB,EAAA,UAAsBoB,oBAAZL,EAAAA,SAAQC,IAAAC,OAAA,SAAAtC,GAAA,YAAdJ,IAAAI,IAAArC,IAAA,SAAAqC,GAAA,MAAA,OAAAhC,OAAAgC,EAAAuC,MAAA,WAAAC,KAAA,MATN,wBAYK9B,KAAAM,cAAAe,KAAA,mCAAA/D,OACFqD,EAAA,eAAA,GADE,uDAAArD,OAIL0E,KAAAC,MAAAtB,EAAA,gBAAA,GAAAA,EAAA,gBAAA,IAJK,wDAAArD,OAMPqD,EAAA,eAAA,GANO,2DAAArD,QAoCuCqD,EAAI,uBAA2B,GAAKA,EAAI,uBAA2B,IAAIuB,QAAQ,GApCtH,6B,wBAkBmC,WAAI5C,IAOlC6C,EAiBZC,EAxB8C9C,EAAAA,UAAsBJ,IAAxDc,KAAAqC,sBAAqER,IAAb7B,KAAA9B,SAAA+B,cALhEf,IAKQc,KAAA9B,SALRgC,eAY+DhB,KAAvDiD,EAAuDnC,KAAAgB,mBAAAhB,KAAA9B,SAAA+B,WAiBnEmC,EAAAhD,kBAAAY,KAAAqC,gBAAA,CACAC,UAAAtC,KAAAuC,iBAAA,GACAC,SAAAxC,KAAAyC,gBAAA,GAgBYC,eAAkB1C,KAAK2C,iBACvBC,gBAAmB5C,KAAK6C,uBAAuB,YAC/CC,uBAA0B9C,KAAK6C,uBAAuB,qBAjBhEE,WAAA/C,KAAAgD,YAhBE,SAAAC,GAAA,OAAAA,EAAAC,UAAAC,IAAAhB,IASDc,EAAA,4BAAAG,EAAAlF,SAAAgC,SAAA,IAED+C,EAAA,4BAAAG,EAAAlF,SAAAgC,SAAA,KAMEF,KAAGqD,YAAKhB,IA2BNrC,KAAKsD,iB,wBAhBwD,SAQzDC,EAAAA,GAKHC,EAAA3B,EAAA2B,MASP,YAPStE,KALFuE,OADMJ,IAALI,EAfF,GALFA,GAAAD,GA2BEC,EAAAD,GAAKF,EAITG,EAAAD,IAAA,EAEFC,I,oCAKK,SAAAC,GAiBD,OAAO,SAACD,EAAK5B,QAhBF3C,IAAXuE,IAkBIA,EAAM,CAAC,EAAG,IAhBRD,GAAJ3B,EAAA6B,GAKF,OANAC,MAGKC,IAAA,EAAAA,IACHH,EAAID,KAAJI,EACDH,EAAA,MACMA,K,8BA0BT,SAAiBA,EAAK5B,GAZlB,YAaS3C,IAARuE,IACDA,EApBJ,CAAA,EAAA,IAEIE,MAAGF,EAAQvE,UAuBJyE,MAAM9B,EAAM,uBApBnB4B,EAAA,KAFEA,EAAAA,KAGFA,I,8BAMH,SAAAI,GAED,OAAA,SAAAJ,EAAA5B,GA6BI,YA5BN3C,IAAAuE,IACAA,EAAA,IAAAK,iBAAAD,EAAA,SAAAhD,EAAAC,GAAA,OAAAD,EAAAkD,WAAAjD,EAAAiD,cAwBUJ,MAAM9B,EAAMmC,WAAcL,MAAM9B,EAAMkC,aACxCN,EAAIQ,YAAYpC,GAvBtB4B,K,6BAQIA,SAAAI,GACD,OAAA,SAAAJ,EAAA5B,GAOL,YAmBiB3C,IAARuE,IAzBLA,EAAOA,IAAPK,iBAAAD,EAAA,SAAAhD,EAAAC,GAAA,OAAAD,EAAAkD,WAAAjD,EAAAiD,cAGFJ,MAAA9B,EAAA,uBAAA8B,MAAA9B,EAAAkC,aACFN,EAAAQ,YAAApC,GAEA4B,K,2CAIQA,SAAUK,EAAJI,GAAwB,IAAAC,EAAAnE,KAAAoE,GAAAC,IAAAH,GAAUI,KAAiBP,SAAAA,GAgC3D,IAhCgC,IAA9BQ,EAAA,GAgCMC,EAAI,EAAGA,EAAI7D,EAAKc,OAAQ+C,IA9BhCD,EAAIZ,KAAM9B,CACR4B,MAAIQ,IAAAA,KAAYpC,EAAhB2C,GAAA,kBACDC,MAAA,EAAA9D,EAAA6D,GAAAC,MAAAzC,KAAA0C,IAAA/D,EAAA6D,GAAAC,OAAA,IAGJ,SAAAE,EAAAC,GAAA,OAAA,IAAAA,GAAA7D,OAAA,GAGH,IAAA8D,cACA,4BACAN,EAgCQ,SAACO,EAAMC,GACLZ,EAAKjG,SAASgC,SAAW,CAAC4E,EAAMC,GAChCZ,EAAKjD,cAhCX,SAAA8D,GAAA,MAAA,GAAA1H,OAAOqH,EAAAK,EAAAC,WAAP,KAAA3H,OAAuBqH,EAAAK,EAAAE,WAAA,GAAvB,KAAA5H,OAAuBqH,EAAAK,EAAAG,kBAPxB,IASQC,EAAOtB,CAAoBuB,iBAAYtB,KAAZuB,gBAA9B,MACDC,uBAAA,OAEC9B,IAAAA,EAAIQ,SAAAA,GACL,IAAAuB,EAAAJ,EAAAnF,IACDA,OAqCmBf,IAAZsG,EArCPA,EAEHvF,KAAAkE,EAAAjG,SAAA+B,UAEDkE,EAAAjG,SAAA+B,QAAAA,EACFkE,EAAAjD,oB,0BAIM,SAAMqD,GA2CRvE,KAAKG,aAAe,IAAIsF,cAzCtB9F,EACE4E,CAAAA,UAAOmB,WAAK,UAAA,YAAA,SACVC,KACAlB,IAFU,O,wCAQd,SAAqBI,GACnB,IAAAe,EAAA5F,KAGEoE,GAAAC,IAAAwB,GAAAvB,KAA0BQ,SAAAA,GA0C9Bc,EAAKvD,gBAAkB1B,EAzCnBiF,EAAAvD,gBAAArD,QAAA,SAAA4F,GACDA,EANckB,KAOfC,WAAInB,EAAAkB,MAAAlB,EAAAb,WAAAgC,WAAcd,EAAAA,YAAdL,EAPNZ,SAAA+B,WAAAnB,EAAAZ,UASEY,EAAA,qBAAiBmB,WAAAnB,EAAA,sBACfA,EAAA,2BADe,IAAAoB,KAAApB,EAAA,4BAEfA,EAAA1B,UAAA,IAAA+C,IAAiB5F,iBAFFuE,EAAA1B,kB,kCAUd,SAAAgD,GAAA,IAAAC,EAAAnG,KA2CPoE,GAAGC,IAAI6B,GAAiB5B,KAAK,SAAA3D,GA1CvBwF,EAAA/F,mBAAmB,GACjB+F,EAAAnF,mBAAcf,GA4CpBU,EAAK3B,QAAQ,SAAAoH,GA3CPD,EAAA/F,oBAAAgG,EAAAlJ,IAAAkJ,EAAAnH,KACDkH,EAAAnF,mBAAAoF,EAAAnH,OAAAmH,EAAAlJ,W,KAOXG,EAAA,WA4C0B,IAAIkC,gBAC1B,6BACA,uBACA,sBA7CA,kCAOD,qCAED,4BACF","file":"exploratory-page.js","sourcesContent":["function map(id, callback) {\n  const mapDiv = $(`#${id}`);\n  mapDiv.vectorMap({\n    map: 'world_mill',\n    hoverColor: false,\n    backgroundColor: '#000',\n    regionsSelectable: true,\n    regionsSelectableOne: true,\n    regionStyle: {\n      initial: {\n        fill: 'gray',\n        \"fill-opacity\": 1,\n      },\n      hover: {\n        \"fill-opacity\": 0.8,\n      },\n      selected: {\n        fill: '#DB0000'\n      },\n      selectedHover: {\n        \"fill-opacity\": 1,\n      }\n    },\n    zoomMax: 8,\n    zoomMin: 1,\n    zoomStep: 1.6,\n    onRegionSelected: ((event, code, isSelected) => {\n      if (isSelected) {\n        const map = mapDiv.vectorMap('get', 'mapObject');\n        const codeName = map.getRegionName(code);\n        callback(codeName);\n      }\n    })\n  });\n}\n\n/**\n * Does reduction using multiple reducers at the same time\n *  and filters results beforehand in a single pass\n */\nfunction filterMultiReduce(iterable, reducers, filterFunc) {\n  const reducedValues = {};\n  const reducerNames = Object.keys(reducers);\n  reducerNames.forEach(name => reducedValues[name] = undefined);\n  iterable.forEach(el => {\n    if(filterFunc(el)) {\n      reducerNames.forEach(name => {\n        reducedValues[name] = reducers[name](reducedValues[name], el);\n      });\n    }\n  });\n  return reducedValues;\n}\n\n/**\n * Maps string of ints with comma separator to array of int\n */\nfunction parseArrayOfInts(str) {\n  return str.split(',').map(x => +x);\n}\n\nclass ExploratoryTool {\n  constructor(mapId, sideBarId, statisticsBarId, audioPlotId,\n      selectorPlotData, exploratoryDataPath, countriesPath) {\n    this.exploratoryData = undefined;\n    this.selected = {\n      country: undefined,\n      interval: undefined\n    };\n    this.audioBarPlot = undefined;\n    this.idToCountryMapping = undefined;\n    this.countryToIdMapping = undefined;\n    this.sideBar = $(`#${sideBarId}`);\n    this.statisticsBar = $(`#${statisticsBarId}`);\n\n    this.preparePlots(audioPlotId);\n    this.startEploratoryDataLoading(exploratoryDataPath)\n    this.startselectionElementCreation(mapId, selectorPlotData);\n    this.startLoadingMappings(countriesPath);\n  }\n\n  /**\n   * Gets top audios and updates data and audio of the bar plot with it.\n   */\n  fillAudioPlot(data) {\n    this.fillAudioWithNonAppearing(data);\n    const topAudio = Object.entries(data).sort((a, b) => b[1] - a[1])\n      .slice(0, 5);\n    const values = topAudio.map(x => x[1]);\n    const labels = topAudio.map(x => x[0]);\n    this.audioBarPlot.updateData(values);\n    this.audioBarPlot.updateLabels(labels);\n  }\n\n  /**\n   * Displays message that data is missing and resets the audio plot.\n   */\n  handleNoData() {\n    this.sideBar.html('No data available');\n    this.statisticsBar.html('No data available');\n    this.fillAudioPlot({});\n  }\n\n  /**\n   * Adds some audios with count 0 if they are missing. Used to ensure that\n   *  there is at least predefined number of audios, so the visualisation\n   *  doesn't have to handle the missing data.\n   */\n  fillAudioWithNonAppearing(data) {\n    const sampleLanguages = [\n      'English', 'Hindi', 'Spanish', 'Japanese', 'Italian', 'Korean', 'Mandarin'\n    ];\n    for(const language of sampleLanguages) {\n      if(data[language] === undefined) {\n        data[language] = 0;\n      }\n    }\n  }\n\n  /**\n   * Displays the given data in the predefined way in the bar plot and the side boxes\n   */\n  displayData(data) {\n    if(data['audioCount'] === undefined) {\n      data['audioCount'] = {};\n    }\n    this.fillAudioPlot(data['audioCount']);\n\n    this.sideBar.html(`\n      Top movies:\n      <ol>\n        ${\n          data['topMovies'] === undefined ? 'No data available' :\n            data['topMovies'].arr.filter(x => x !== undefined).map(x => `<li>${x.title}</li>`).join('\\n')\n        }\n      </ol>\n      Top TV shows:\n      <ol>\n        ${\n          data['topMovies'] === undefined ? 'No data available' :\n            data['topShows'].arr.filter(x => x !== undefined).map(x => `<li>${x.title}</li>`).join('\\n')\n        }\n      </ol>\n    `);\n    this.statisticsBar.html(`\n      <p>Number of movies: <b>${data['numberOfTitles'][0]}</b></p>\n\n      <p>Average length of a movie: <b>${Math.round(data['averageDuration'][0] / data['averageDuration'][1])} minutes</b></p>\n\n      <p>Number of TV Shows: <b>${data['numberOfTitles'][1]}</b></p>\n\n      <p>Average duration of a TV show: <b>${(data['averageNumberOfSeasons'][0] / data['averageNumberOfSeasons'][1]).toFixed(2)} seasons</b></p>\n    `)\n  }\n\n  /**\n   * Starts aggregation and on it's end displays data appropriately. If there\n   *  is no appropriate data, it invokes the function to display info that\n   *  data is missing.\n   */\n  updateData() {\n    if(this.exploratoryData !== undefined &&\n        this.selected.country !== undefined &&\n        this.selected.interval !== undefined) {\n\n      const countryId = this.countryToIdMapping[this.selected.country];\n      if(countryId !== undefined) {\n\n        const filterCondition = entry => entry.countries.has(countryId) &&\n          entry['release date on Netflix'] >= this.selected.interval[0] &&\n          entry['release date on Netflix'] <= this.selected.interval[1];\n\n        const aggregates = filterMultiReduce(this.exploratoryData, {\n            'topMovies': this.topMoviesReducer(5),\n            'topShows': this.topShowsReducer(5),\n            'numberOfTitles': this.countMoviesShows,\n            'averageDuration': this.attrAverageDataReducer('duration'),\n            'averageNumberOfSeasons': this.attrAverageDataReducer('number of seasons'),\n            'audioCount': this.countAudio\n          },\n          filterCondition);\n        this.displayData(aggregates);\n      }\n      else {\n        this.handleNoData();\n      }\n    }\n    else {\n      this.handleNoData();\n    }\n  }\n\n  /**\n   * A reduction function that count the number of occurences of each value of\n   *   attribute audio\n   */\n  countAudio(agg, title) {\n    if(agg === undefined) {\n      agg = {};\n    }\n    const audio = title.audio;\n    if(agg[audio] === undefined) {\n      agg[audio] = 1;\n    }\n    else {\n      agg[audio] += 1\n    }\n    return agg;\n  }\n\n  /**\n   * A reduction function that counts the total sum of the given attribute and the\n   *   number of items that has it and returns result as a two element array\n   *   ([the sum, the count])\n   */\n  attrAverageDataReducer(attrName) {\n    return (agg, title) => {\n      if(agg === undefined) {\n        agg = [0, 0];\n      }\n      const attrValue = +title[attrName];\n      if(!isNaN(attrValue) && attrValue > 0) {\n        agg[0] += +attrValue;\n        agg[1]++;\n      }\n      return agg;\n    }\n  }\n\n  /**\n   * A reduction function that counts number of movies and TV shows\n   *  and the result is two element array (movie and TV show count respectively)\n   */\n  countMoviesShows(agg, title) {\n    if(agg === undefined) {\n      agg = [0, 0];\n    }\n    if(!isNaN(title.duration)) {\n      agg[0]++;\n    }\n    else if(!isNaN(title['number of seasons'])) {\n      agg[1]++;\n    }\n    return agg;\n  }\n\n  /**\n   *  Returns a reduction function that reduces movies by keeping only k\n   *    top rated according to metacritic.\n   */\n  topMoviesReducer(k) {\n    return (agg, title) => {\n      if(agg === undefined) {\n        agg = new SortedCollection(k, (a, b) => a.metacritic > b.metacritic);\n      }\n      if(!isNaN(title.duration) && !isNaN(title.metacritic)) {\n        agg.tryToInsert(title);\n      }\n      return agg;\n    }\n  }\n\n  /**\n   *  Returns a reduction function that reduces shows by keeping only k\n   *    top rated according to metacritic.\n   */\n  topShowsReducer(k) {\n    return (agg, title) => {\n      if(agg === undefined) {\n        agg = new SortedCollection(k, (a, b) => a.metacritic > b.metacritic);\n      }\n      if(!isNaN(title['number of seasons']) && !isNaN(title.metacritic)) {\n        agg.tryToInsert(title);\n      }\n      return agg;\n    }\n  }\n\n  /**\n   * Loads data for the background of selector and creates the map\n   */\n  startselectionElementCreation(mapId, selectorDataFilepath) {\n    d3.csv(selectorDataFilepath).then(data => {\n      const points = [];\n\n      for(let i = 0; i < data.length; i++) {\n        points.push({\n          month: new Date(data[i]['release month']),\n          count: (data[i].count > 0) ? Math.log(data[i].count) : 0\n        });\n      }\n\n      const f = d => ('0' + d).slice(-2);\n\n      const selector = new RangeSelector(\n        'exporatory-time-selection',\n        points,\n        (left, right) => {\n          this.selected.interval = [left, right];\n          this.updateData();\n        },\n        date => `${f(date.getDate())}-${f(date.getMonth() + 1)}-${f(date.getFullYear())}`);\n\n        const synonyms = {\n          'United Kingdom': 'UK',\n          'United States': 'USA',\n          'United Arab Emirates': 'UAE'\n        };\n\n        map(mapId, country => {\n          const synonym = synonyms[country];\n          if(synonym !== undefined) {\n            country = synonym;\n          }\n          if(country !== this.selected.country) {\n            this.selected.country = country;\n            this.updateData();\n          }\n        });\n    });\n  }\n\n  /**\n   * Initializes plots that will show aggregated data\n   */\n  preparePlots(audioPlotId) {\n    this.audioBarPlot = new SimpleBarPlot(\n      audioPlotId,\n      ['English', 'Japanese', 'Chinese', 'Portugese', 'Latin'],\n      1200,\n      380,\n      100\n    );\n  }\n\n  /**\n   * Loads title data\n   */\n  startEploratoryDataLoading(exploratoryDataFilepath) {\n    d3.csv(exploratoryDataFilepath).then(data => {\n      this.exploratoryData = data;\n      this.exploratoryData.forEach(d => {\n        d.imdb = parseFloat(d.imdb);\n        d.metacritic = parseFloat(d.metacritic);\n        d.duration = parseFloat(d.duration);\n        d['number of seasons'] = parseFloat(d['number of seasons']);\n        d['release date on Netflix'] = new Date(d['release date on Netflix']);\n        d.countries = new Set(parseArrayOfInts(d.countries));\n      });\n    });\n  }\n\n  /**\n   * Load countries and their ids\n   */\n  startLoadingMappings(countryFilepath) {\n    d3.csv(countryFilepath).then(data => {\n      this.idToCountryMapping = {};\n      this.countryToIdMapping = {};\n      data.forEach(dataPoint => {\n        this.idToCountryMapping[+dataPoint.id] = dataPoint.name;\n        this.countryToIdMapping[dataPoint.name] = +dataPoint.id;\n      });\n    });\n  }\n}\n\n$(() => {\n  const exploratoryTool = new ExploratoryTool(\n    'exploratory-tool-world-map',\n    'exploratory-side-bar',\n    'statistics-side-bar',\n    'exploratory-tool-audio-bar-plot',\n    'data/release_density_per_month.csv',\n    'data/exploratory_data.csv',\n    'data/countries.csv');\n});\n"]}