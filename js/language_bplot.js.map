{"version":3,"sources":["language_bplot.js"],"names":["RacingBarsAudio","svgElement","_classCallCheck","this","svg","currentData","datetext","width","height","margin","ini_date","Date","top_n","tickDuration","barPadding","setup","_this","dateSlice","length","d","release_date","getTime","d3","scaleLog","domain","count","range","left","right","x","xScale","xAxis","axisTop","scale","ticks","tickSize","top","bottom","tickFormat","format","append","attr","concat","call","selectAll","classed","scaleLinear","_this2","max","y","bars","data","audio","enter","style","transition","duration","ease","easeLinear","rank","exit","remove","_this3","labels","text","yScale","_this4","valueLabel","tween","i","interpolate","textContent","Math","round","t","arr","date","lower","higher","mid","floor","midDate","_this5","Object","entries","map","_ref","_ref2","_slicedToArray","binarySearch","sort","b","slice","updateLabels","forEach","setDate","getDate","updateValueLabels","createXaxis","data_path","TimeSelector","plot","updateData","getMonth","getFullYear","csv","dateFormatter","country_data","entry","delay","undefined","selector","country","push","$","instantiateRacingBars"],"mappings":"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","file":"language_bplot.js","sourcesContent":["//  code adapted from : https://bl.ocks.org/jrzief/70f1f8a5d066a286da3a1e699823470f\n\n// const { duration } = require(\"moment\");\n\nclass RacingBarsAudio {\n  constructor(svgElement) {\n    this.svg = svgElement;\n    this.currentData = {};\n    this.datetext = {};\n    //this.datesValues = {};\n    this.width = 0;\n    this.height = 0;\n    this.margin = {};\n    this.ini_date = new Date();\n    this.top_n = 0;\n    this.tickDuration = 0;\n    this.barPadding= 0 ;\n    this.setup()\n  }\n\n  xScale() {\n    let dateSlice = {};\n    if (this.currentData.length > 0) {\n      dateSlice = this.currentData.filter(d => d.release_date.getTime() == this.ini_date.getTime());\n    }\n    return d3.scaleLog()\n    .domain([1, d3.max(dateSlice, d => d.count)])\n    .range([this.margin.left, this.width-this.margin.right-65]);\n  }\n\n  createXaxis() {\n    let x = this.xScale() ;\n    let xAxis = d3.axisTop()\n      .scale(x)\n      .ticks(this.width > 500 ? 5:2)\n      .tickSize(-(this.height-this.margin.top-this.margin.bottom))\n      .tickFormat(d => d3.format(',')(d));\n\n    this.svg.append('g')\n      .attr('class', 'axis xAxis')\n      .attr('transform', `translate(0, ${this.margin.top})`)\n      .call(xAxis)\n      .selectAll('.tick line')\n      .classed('origin', d => d == 0);\n  }\n\n  yScale() {\n    return d3.scaleLinear()\n      .domain([this.top_n, 0])\n      .range([this.height-this.margin.bottom, this.margin.top]);\n  }\n\n  updateBars(dateSlice) {\n    let x = this.xScale().domain([1, d3.max(dateSlice, d => d.count)]);\n    let y = this.yScale();\n\n    let bars = this.svg.selectAll('.bar').data(dateSlice, d => d.audio);\n\n      bars\n        .enter()\n        .append('rect')\n        .attr('class', d => `bar ${d.audio.replace(/\\s/g,'_')}`)\n        .attr('x', x(1))\n        .attr( 'width',d => x(d.count)-x(1)-1)\n        .attr('y', d => y(this.top_n+1)+5)\n        .attr('height', y(1)-y(0)-this.barPadding)\n        .style('fill', '#db0000')\n        .transition()\n          .duration(this.tickDuration)\n          .ease(d3.easeLinear)\n          .attr('y', d => y(d.rank)+5);\n\n      bars\n      .transition()\n        .duration(this.tickDuration)\n        .ease(d3.easeLinear)\n        .attr('width', d => x(d.count)-x(1)-1)\n        .attr('y', d => y(d.rank)+5);\n\n      bars\n      .exit()\n      .transition()\n        .duration(this.tickDuration)\n        .ease(d3.easeLinear)\n        .attr('width', d => x(d.count)-x(1)-1)\n        .attr('y', d => y(this.top_n+10)+5)\n        .remove();\n  }\n\n  updateLabels(dateSlice) {\n\n    let x = this.xScale().domain([1, d3.max(dateSlice, d => d.count)]);\n    let y = this.yScale();\n\n    let labels = this.svg.selectAll('.label')\n        .data(dateSlice, d => d.audio);\n\n    labels\n      .enter()\n      .append('text')\n      .attr('class', 'label')\n      .attr('x', d => x(1)-8)\n      .attr('y', d => y(this.top_n+1)+5+((y(1)-y(0))/2))\n      .style('text-anchor', 'end')\n      .style('fill', 'whitesmoke')\n      .text(d => d.audio)\n      .transition()\n        .duration(this.tickDuration)\n        .ease(d3.easeLinear)\n        .attr('y', d => y(d.rank)+5+((y(1)-y(0))/2));\n\n    labels\n      .transition()\n      .duration(this.tickDuration)\n        .ease(d3.easeLinear)\n        .attr('x', x(1)-8)\n        .attr('y', d => y(d.rank)+5+((y(1)-y(0))/2));\n\n    labels\n      .exit()\n      .transition()\n        .duration(this.tickDuration)\n        .ease(d3.easeLinear)\n        .attr('x', d => x(1)-8)\n        .attr('y', d => y(this.top_n+10)+5)\n        .remove();\n  }\n\n  updateValueLabels (dateSlice) {\n\n    let x = this.xScale().domain([1, d3.max(dateSlice, d => d.count)]);\n    let y = this.yScale();\n\n    let valueLabel = this.svg.selectAll('.valueLabel')\n        .data(dateSlice, d => d.audio);\n\n    valueLabel\n        .enter()\n        .append('text')\n        .attr('class', 'valueLabel')\n        .attr('x', d => x(d.count)+5)\n        .attr('y', d => y(d.rank)+5+((y(1)-y(0))/2)+1)\n        .style('fill', 'whitesmoke')\n        .transition()\n        .duration(this.tickDuration)\n        .tween(\"textTween\", function (d) {\n          var i = d3.interpolate(this.textContent, d.count);\n              return function(t) {\n                // t is the percent completion of the transition\n                this.textContent = Math.round(i(t));\n              }\n        });\n\n    valueLabel\n      .transition()\n      .duration(this.tickDuration)\n      .ease(d3.easeLinear)\n      .attr('x', d => x(d.count)+5)\n      .attr('y', d => y(d.rank)+5+((y(1)-y(0))/2)+1)\n      .tween(\"textTween\", function (d) {\n        var i = d3.interpolate(this.textContent, d.count);\n            return function(t) {\n              // t is the percent completion of the transition\n              this.textContent = Math.round(i(t));\n            }\n      });\n\n    valueLabel\n      .exit()\n      .transition()\n      .duration(this.tickDuration)\n      .ease(d3.easeLinear)\n      .attr('x', d => x(d.count)+5)\n      .attr('y', d => y(this.top_n+10)+5)\n      .tween(\"textTween\", function (d) {\n        var i = d3.interpolate(this.textContent, d.count);\n            return function(t) {\n              // t is the percent completion of the transition\n              this.textContent = Math.round(i(t));\n            }\n      });\n\n  }\n\n  binarySearch(arr, date) {\n    let lower = 0, higher = arr.length - 1;\n\n    if(arr[lower].release_date > date) {\n      return 0;\n    }\n    if(arr[higher].release_date <= date) {\n      return arr[higher].count;\n    }\n\n    while(lower <= higher) {\n      const mid = Math.floor((lower + higher) / 2);\n      const midDate = arr[mid].release_date;\n      if(midDate == date) {\n        return arr[mid].count;\n      }\n      else if(midDate > date) {\n        higher = mid - 1;\n      }\n      else {\n        lower = mid + 1;\n      }\n    }\n    return arr[lower - 1].count;\n  }\n\n  updateData() {\n    const date = this.ini_date.getTime();\n    let dateSlice = Object.entries(this.currentData).map(([audio, entries]) => ({\n        audio: audio,\n        count: this.binarySearch(entries, date)\n      }))\n      .sort((a,b) => b.count - a.count)\n      .slice(0, this.top_n);\n      dateSlice.forEach((d,i) => d.rank = i);\n\n    let x = this.xScale().domain([1, d3.max(dateSlice, d => d.count)]);\n\n    if (dateSlice.length > 0) {\n      this.updateBars(dateSlice) ;\n      this.updateLabels(dateSlice) ;\n      this.updateValueLabels(dateSlice) ;\n    }\n\n    this.ini_date = new Date(this.ini_date.setDate(this.ini_date.getDate() + 1));\n  }\n\n  setup() {\n    this.width = 2000;\n    this.height = 960;\n    this.margin = {top: 50, right: 40, bottom: 30, left: 125};\n    this.svg.attr('viewBox', `0 0 ${this.width} ${this.height}`);\n\n    this.ini_date = new Date('2015-04-14');\n    this.top_n= 10;\n\n    this.tickDuration = 200;\n    this.barPadding= (this.height-(this.margin.bottom+this.margin.top))/(this.top_n*5); ;\n\n    this.svg.append('g')\n    .attr(\"height\", `translate(0, ${this.height - 50})`)\n\n    this.createXaxis();\n  }\n}\n\nfunction instantiateRacingBars(svg, data_path) {\n\n  let plot = new RacingBarsAudio(svg);\n\n  var new_data = {} ;\n\n  const dateFormatter = date => `${date.getDate()}-${date.getMonth()+1}-${date.getFullYear()}`;\n\n  const selector = new TimeSelector(\n    'racing-audio-time-selection',\n    [new Date('04-14-2015'), new Date('04-08-2020')],\n    function(date) {\n      plot.ini_date = date;\n      plot.updateData();\n    },\n    60000,\n    'date', dateFormatter\n\n  );\n\n  function showInitialPlot() {\n    svg.style('opacity', 0);\n    svg.transition()\n        .delay(1000)\n        .duration(600)\n        .style('opacity', 1);\n    selector.setValue('2015-04-14');\n  }\n\n  d3.csv(data_path).then(data => {\n    const country_data = {};\n\n    data.forEach(entry => {\n      const country = entry.audio;\n      if(country_data[country] === undefined) {\n        country_data[country] = [];\n      }\n      country_data[country].push({\n        count: +entry.count,\n        release_date: new Date(entry.release_date)\n      });\n    });\n\n    plot.currentData = country_data;\n\n    plot.updateData() ;\n  });\n\n}\n\n$(()=> {\n  let svg = d3.select('svg#most-languages') ;\n  let data_path = \"data/racing_audio.csv\";\n  instantiateRacingBars(svg, data_path)\n}\n)"]}