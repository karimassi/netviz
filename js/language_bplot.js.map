{"version":3,"sources":["language_bplot.js"],"names":["RacingBarsAudio","svgElement","_classCallCheck","this","svg","currentData","datetext","datesValues","width","margin","ini_date","top_n","height","dateSlice","length","filter","d","release_date","_this","barPadding","domain","setup","d3","max","count","range","left","right","x","xScale","xAxis","axisTop","scale","ticks","tickSize","top","bottom","tickFormat","format","append","attr","concat","call","selectAll","scaleLog","classed","scaleLinear","_this2","style","halo","text","select","strokeWidth","parentNode","insertBefore","cloneNode","y","yScale","data","enter","audio","rank","dateText","_this3","bars","replace","duration","easeLinear","transition","tickDuration","ease","exit","remove","_this4","labels","slice","_this5","ticker","interval","e","sort","a","b","ascending","forEach","i","updateBars","updateLabels","stop","createXaxis","instantiateRacingBars","data_path","plot","then","keys","intiateBars"],"mappings":"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","file":"language_bplot.js","sourcesContent":["//  code adapted from : https://bl.ocks.org/jrzief/70f1f8a5d066a286da3a1e699823470f\n\nclass RacingBarsAudio {\n  constructor(svgElement) {\n    this.svg = svgElement;\n    this.currentData = {};\n    this.datetext = {};\n    this.datesValues = {};\n    this.width = 0;\n    this.height = 0;\n    this.margin = {};\n    this.ini_date = 0;\n    this.top_n = 0;\n    this.tickDuration = 0;\n    this.barPadding= 0 ;\n    this.setup()\n  }\n\n  xScale() {\n    let dateSlice = {};\n    if (this.currentData.length > 0) {\n      dateSlice = this.currentData.filter(d => d.release_date == this.datesValues[this.ini_date]);\n    }\n    return d3.scaleLog()\n    .domain([1, d3.max(dateSlice, d => d.count)])\n    .range([this.margin.left, this.width-this.margin.right-65]);\n  }\n\n  createXaxis() {\n    let x = this.xScale() ;\n    let xAxis = d3.axisTop()\n      .scale(x)\n      .ticks(this.width > 500 ? 5:2)\n      .tickSize(-(this.height-this.margin.top-this.margin.bottom))\n      .tickFormat(d => d3.format(',')(d));\n      \n    this.svg.append('g')\n      .attr('class', 'axis xAxis')\n      .attr('transform', `translate(0, ${this.margin.top})`)\n      .call(xAxis)\n      .selectAll('.tick line')\n      .classed('origin', d => d == 0);\n  }\n\n  yScale() {\n    return d3.scaleLinear()\n      .domain([this.top_n, 0])\n      .range([this.height-this.margin.bottom, this.margin.top]);\n  }\n\n  dateText () {\n\n  const halo = function(text, strokeWidth) {\n    text.select(function() { return this.parentNode.insertBefore(this.cloneNode(true), this); })\n      .style('fill', '#000000')\n        .style( 'stroke','#000000')\n        .style('stroke-width', strokeWidth)\n        .style('stroke-linejoin', 'round')\n        .style('opacity', 1);\n    }\n    return this.svg.append('text')\n    .attr('class', 'dateText')\n    .attr('x', this.width-this.margin.right)\n    .attr('y', this.height-25)\n    .style('text-anchor', 'end')\n    .style('fill', '#ffffff')\n    .text(d => this.datesValues[this.ini_date])\n    .call(halo, 10);\n    \n  }\n\n  intiateBars(dateSlice) {\n\n    let x = this.xScale().domain([1, d3.max(dateSlice, d => d.count)]);\n    let y = this.yScale();\n\n    this.svg.selectAll('rect.bar')\n        .data(dateSlice, d => d.audio)\n        .enter()\n        .append('rect')\n        .attr('class', 'bar')\n        .attr('x', x(1))\n        .attr('width', d => x(d.count)-x(1)-1)\n        .attr('y', d => y(d.rank)+5)\n        .attr('height', y(1)-y(0)-this.barPadding)\n        .style('fill', '#db0000');\n\n    this.svg.selectAll('text.label')\n        .data(dateSlice, d => d.audio)\n        .enter()\n        .append('text')\n        .attr('class', 'label')\n        .attr('x', d => x(1)-8)\n        .attr('y',d => y(d.rank)+5+((y(1)-y(0))/2)+1)\n        .style('text-anchor', 'end')\n        .style('fill', 'whitesmoke')\n        .text(d => d.audio);\n\n    this.datetext = this.dateText();\n  }\n\n  updateBars(dateSlice) {\n    let x = this.xScale().domain([1, d3.max(dateSlice, d => d.count)]);\n    let y = this.yScale();\n\n    let bars = this.svg.selectAll('.bar').data(dateSlice, d => d.audio);\n\n      bars\n        .enter()\n        .append('rect')\n        .attr('class', d => `bar ${d.audio.replace(/\\s/g,'_')}`)\n        .attr('x', x(1))\n        .attr( 'width',d => x(d.count)-x(1)-1)\n        .attr('y', d => y(this.top_n+1)+5)\n        .attr('height', y(1)-y(0)-this.barPadding)\n        .style('fill', '#db0000')\n        .transition()\n          .duration(this.tickDuration)\n          .ease(d3.easeLinear)\n          .attr('y', d => y(d.rank)+5);\n       \n      bars\n      .transition()\n        .duration(this.tickDuration)\n        .ease(d3.easeLinear)\n        .attr('width', d => x(d.count)-x(1)-1)\n        .attr('y', d => y(d.rank)+5);\n\n      bars\n      .exit()\n      .transition()\n        .duration(this.tickDuration)\n        .ease(d3.easeLinear)\n        .attr('width', d => x(d.count)-x(1)-1)\n        .attr('y', d => y(this.top_n+10)+5)\n        .remove();\n  }\n\n  updateLabels(dateSlice) {\n\n    let x = this.xScale().domain([1, d3.max(dateSlice, d => d.count)]);\n    let y = this.yScale();\n\n    let labels = this.svg.selectAll('.label')\n        .data(dateSlice, d => d.audio);\n       \n    labels\n      .enter()\n      .append('text')\n      .attr('class', 'label')\n      .attr('x', d => x(1)-8)\n      .attr('y', d => y(this.top_n+1)+5+((y(1)-y(0))/2))\n      .style('text-anchor', 'end')\n      .style('fill', 'whitesmoke')\n      .text(d => d.audio)    \n      .transition()\n        .duration(this.tickDuration)\n        .ease(d3.easeLinear)\n        .attr('y', d => y(d.rank)+5+((y(1)-y(0))/2)+1);\n            \n    labels\n      .transition()\n      .duration(this.tickDuration)\n        .ease(d3.easeLinear)\n        .attr('x', x(1)-8)\n        .attr('y', d => y(d.rank)+5+((y(1)-y(0))/2)+1);\n\n    labels\n      .exit()\n      .transition()\n        .duration(this.tickDuration)\n        .ease(d3.easeLinear)\n        .attr('x', d => x(1)-8)\n        .attr('y', d => y(this.top_n+10)+5)\n        .remove();\n  }\n\n  ticker() {\n    let ticker = d3.interval(e => {\n\n      let dateSlice = this.currentData.filter(d => d.release_date == this.datesValues[this.ini_date])\n        .sort((a,b) => d3.ascending(a, b))\n        .slice(0,this.top_n);\n\n\n      dateSlice.forEach((d,i) => d.rank = i);\n      \n      let x = this.xScale().domain([1, d3.max(dateSlice, d => d.count)]); \n      /* let xAxis = d3.axisTop()\n        .scale(x)\n        .ticks(this.width > 500 ? 5:2)\n        .tickSize(-(this.height-this.margin.top-this.margin.bottom))\n        .tickFormat(d => d3.format(',')(d)); */\n\n     /*  this.svg.select('.xAxis')\n        .transition()\n        .duration(this.tickDuration)\n        .ease(d3.easeLinear)\n        .call(xAxis); */\n        \n      \n      this.updateBars(dateSlice) ;\n      this.updateLabels(dateSlice) ;\n\n      this.datetext.text(d => this.datesValues[this.ini_date]);\n      \n      if(this.datesValues[this.ini_date] == this.datesValues.slice(-1)) ticker.stop();\n      ++ this.ini_date ;\n    },this.tickDuration);\n    \n  }\n\n  setup() {\n    this.width = 2000;\n    this.height = 960;\n    this.margin = {top: 50, right: 40, bottom: 30, left: 125};\n    this.svg.attr('viewBox', `0 0 ${this.width} ${this.height}`);\n\n    this.top_n= 10;\n\n    this.tickDuration = 200;\n    this.barPadding= (this.height-(this.margin.bottom+this.margin.top))/(this.top_n*5); ;\n\n    this.svg.append('g')\n    .attr(\"height\", `translate(0, ${this.height - 50})`)\n\n    this.createXaxis();\n  }\n}\n\nfunction instantiateRacingBars(svg, data_path) {\n\n  let plot = new RacingBarsAudio(svg);\n\n  function showInitialPlot() {\n    svg.style('opacity', 0);\n    svg.transition()\n        .delay(1000)\n        .duration(600)\n        .style('opacity', 1);\n  }\n\n  d3.csv(data_path).then(data => {\n    data.forEach(d => {\n      d.count = +d.count,\n      d.release_date = d.release_date\n    });\n\n    plot.currentData = data;\n    plot.datesValues = d3.map(data, function(d) {return d.release_date}).keys();\n    let dateSlice = data.filter(d => d.release_date == plot.datesValues[plot.ini_date])\n    .sort((a,b) =>  d3.ascending(a, b))\n    .slice(0, plot.top_n);\n\n    dateSlice.forEach((d,i) => d.rank = i);\n\n    plot.intiateBars(dateSlice) ;\n\n    plot.ticker();\n  });\n  \n}"]}