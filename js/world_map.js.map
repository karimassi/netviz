{"version":3,"sources":["world_map.js"],"names":["updateCountryPassport","name","info","d3","empty","map","append","$","count_movies","concat","count_series","genres","join","WorldMapPlot","json","then","data","draw","code","id","args","_classCallCheck","this","callback","key","_this","total_counts","vectorMap","hoverColor","backgroundColor","zoomOnScroll","regionsSelectable","regionsSelectableOne","series","regions","values","scale","legend","horizontal","title","stroke-width","selectedHover","regionStyle","zoomMax","zoomMin","hover","onRegionSelected","event","isSelected","selected","fill","getRegionName"],"mappings":"mZACE,SAASA,sBAAqBC,EAAAC,GAC9BC,EAAE,qBAAMC,QACNC,EAAAA,qBAAiBC,OAAjBD,OAAAA,OAAiBJ,EAAjBI,mBACEL,IAAAA,GAYJO,EAAE,qBAAqBD,OAAO,mEAN9BC,EAAE,qBAAqBH,OAAvB,uBACAG,EAAE,qBAAqBD,OAAvBC,oBAAAA,OAAAL,EAAAM,aAAAD,aASAA,EAAE,qBAAqBD,OAAO,yBAR9BC,EAAA,qBAAmBD,OAAnB,oBAAAG,OAAgCP,EAAAQ,aAAhC,aACIH,EAAAA,qBAACD,OAAsBA,8BACvBC,EAAA,qBAAAD,OAAA,MAAAG,OAAAP,EAAAS,OAAAC,KAAA,MAAA,cAXFL,EAAA,qBAAAD,OAAA,wGAHJC,EAAE,WACA,IAAMF,EAAO,IAAIQ,aAAa,cAC9BV,GAAGW,KAAK,4BAA4BC,KAAK,SAAAC,GACvCX,EAAIY,KAAKD,EAAQ,SAACE,EAAMjB,GACtBD,sBAAsBC,EAAMe,EAAKE,U,IAcnCL,a,WACFN,SAAAA,EAAEY,EAAAC,GAAFC,gBAAAC,KAAAT,GACES,KAAAH,GAAAA,EACAG,KAAAF,KAAAA,S,kCAIH,SAAAJ,EAAAO,GAAA,IAGCC,EAHDC,EAAAH,KAEKT,EAQiB,GAPrB,IAAAW,KAAAR,EAAsBU,EAAAF,GAAAR,EAAAQ,GAAAhB,aAAAQ,EAAAQ,GAAAd,aAEpBH,EAAAe,KAAKF,IAALO,UAAA,CACDtB,IAAA,aAWGuB,YAAY,EACZC,gBAAiB,OACjBC,cAAc,EACdC,mBAZCf,EAAgBgB,sBAAA,EAcjBC,OAAQ,CAZVC,QAAIR,CAAAA,CAcES,OAAQT,EAbdU,MAASZ,CAAT,UAAsB,WACpBE,kBAAoBV,aACrBqB,OAAA,CAeOC,YAAY,EAblBC,MAASZ,qBAITG,YAAAA,CACAC,QAAAA,CACAC,KAAAA,UACAC,eAAQ,GAEJE,MAAAA,CACAC,eAAQ,IAERC,SAAM,CACJC,KAAAA,YACAC,OAAAA,QAFMC,eAAA,GALJC,cAPW,CAkBnBC,eAAa,IAGTC,QAAA,EAFOC,QADE,EAKXC,SAAK,IACHC,iBAAA,SAAAC,EAAgB7B,EAAA8B,GANPA,IAQXC,EAAQ1C,EAAEkB,EAAAN,IAAAQ,UAAA,MAAA,aACRuB,EAAMhC,EAAAb,EADE8C,cAAAjC,c","file":"world_map.js","sourcesContent":["$(function() {\n  const map =  new WorldMapPlot(\"#world-map\");\n  d3.json(\"data/countries_info.json\").then(data => {\n    map.draw(data, ( (code, name) => {\n      updateCountryPassport(name, data[code])\n    }))\n  });\n})\n\nfunction updateCountryPassport(name, info) {\n  $(\"#country-passport\").empty()\n  $(\"#country-passport\").append(`<h2>${name}</h2><br>`)\n  if (typeof info == 'undefined') {\n      $(\"#country-passport\").append(\"<p>Unfortunately, no information is available for that country... Try selecting another one!</p><br>\")\n      return \n  }\n  $(\"#country-passport\").append(\"<p>Netflix has been available in this country since ...</p><br>\")\n\n  $(\"#country-passport\").append(\"<h4>Movies</h4><br>\")\n  $(\"#country-passport\").append(`<p class=\"count\">${info.count_movies}</p><br>`)\n  $(\"#country-passport\").append(\"<h4>TV Shows</h4><br>\")\n  $(\"#country-passport\").append(`<p class=\"count\">${info.count_series}</p><br>`)\n  $(\"#country-passport\").append(\"<h4>Top 10 genres</h4><br>\")\n  $(\"#country-passport\").append(`<p>${info.genres.join(', ')}</p><br>`)\n\n}\n\nclass WorldMapPlot {\n  constructor(id, args) {\n    this.id = id;\n    this.args = args;\n  }\n\n  draw(data, callback) {\n\n    let total_counts = {};\n    for (var key in data) {\n      total_counts[key] = data[key].count_movies + data[key].count_series;\n    }\n    \n    $(this.id).vectorMap({\n      map: 'world_mill',\n      hoverColor: false,\n      backgroundColor: '#000',\n      zoomOnScroll: false, \n      regionsSelectable: true,\n      regionsSelectableOne: true,\n      series: {\n        regions: [{\n          values: total_counts,\n          scale: ['#550000', '#D00000'],\n          normalizeFunction: 'polynomial',\n          legend: {\n            horizontal: true,\n            title: 'Catalogue size'\n          }\n        }]\n      },\n      regionStyle: {\n        initial: {\n          fill: '#564D4D',\n          \"fill-opacity\": 1,\n        },\n        hover: {\n          \"fill-opacity\": 0.8,\n        },\n        selected: {\n          fill: 'lightgray',\n          stroke: 'white',\n          \"stroke-width\": 3\n        },\n        selectedHover: {\n          \"fill-opacity\": 1,\n        }\n      },\n      zoomMax: 8, \n      zoomMin: 1, \n      zoomStep: 1.6,\n      onRegionSelected: ((event, code, isSelected) => {\n        if (isSelected) {\n          let map=$(this.id).vectorMap('get', 'mapObject');\n          callback(code, map.getRegionName(code))\n        }\n      })\n    });  \n  }\n}"]}