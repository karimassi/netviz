{"version":3,"sources":["world_map.js"],"names":["updateCountryPassport","name","info","$","empty","append","concat","date_joined","count_movies","count_series","genres","join","map","WorldMapPlot","d3","json","then","data","draw","code","id","_classCallCheck","this","callback","key","_this","total_counts","vectorMap","hoverColor","backgroundColor","zoomOnScroll","regionsSelectable","regionsSelectableOne","series","regions","values","normalizeFunction","legend","title","scale","horizontal","selectedHover","fill-opacity","initial","fill","zoomStep","onRegionSelected","event","isSelected","selected","getRegionName"],"mappings":"mZAOC,SAPDA,sBAAAC,EAAAC,GASAC,EAAA,qBAAAC,QACAD,EAAA,qBAAAE,OAAA,OAAAC,OAAAL,EAAA,mBACA,IAAAC,GAWEC,EAAE,qBAAqBE,OAAvB,uDAAAC,OAAqFJ,EAAKK,YAA1F,cANAJ,EAAE,qBAAqBC,OAAvB,uBACAD,EAAE,qBAAqBE,OAAvBF,oBAAAA,OAAAD,EAAAM,aAAAL,aASAA,EAAE,qBAAqBE,OAAO,yBAR9BF,EAAA,qBAAmBE,OAAnB,oBAAAC,OAAgCJ,EAAAO,aAAhC,aACIN,EAAAA,qBAACE,OAAsBA,8BACvBF,EAAA,qBAAAE,OAAA,MAAAC,OAAAJ,EAAAQ,OAAAC,KAAA,MAAA,cARNR,EAAA,qBAAAE,OAAA,wGAZAF,EAAE,WACA,IAAMS,EAAO,IAAIC,aAAa,cAC9BC,GAAGC,KAAK,4BAA4BC,KAAK,SAAAC,GACvCL,EAAIM,KAAKD,EAAQ,SAACE,EAAMlB,GACtBD,sBAAsBC,EAAMgB,EAAKE,U,IAwBnCN,a,WACFV,SAAAA,EAAEiB,GAAAC,gBAAAC,KAAAT,GAEHS,KAAAF,GAAAA,S,kCAOiB,SAAAH,EAAAM,GAAA,IAIhBC,EAJgBC,EAAAH,KAEfI,EAAA,GAED,IAAAF,KAAAP,EACFS,EAAAF,GAAAP,EAAAO,GAAAhB,aAAAS,EAAAO,GAAAf,aAGAN,EAAAmB,KAAAF,IAAAO,UAAA,CACAf,IAAA,aAWMgB,YAAY,EACZC,gBAAiB,OACjBC,cAAc,EACdC,mBAAmB,EACnBC,sBAdCf,EAAgBgB,OAAA,CAgBfC,QAAS,CAAC,CAddC,OAAAT,EACIA,MAAAA,CAAAA,UAAJ,WAgBMU,kBAAmB,aAfzBC,OAAA,CACEX,YAAY,EACbY,MAAA,qBAICV,YAAU,CACVC,QAAAA,CACAC,KAAAA,UACAC,eAAiB,GAEjBE,MAAM,CACJC,eAAU,IAERK,SAAK,CACLH,KAAAA,YACAC,OAAM,QACJG,eAAY,GADNC,cAAA,CAJAC,eAAD,IAWTC,QAAAA,EACEC,QAAAA,EACAC,SAAA,IAGAC,iBAAA,SAAAC,EAAgB5B,EAAA6B,GANPA,IAQXC,EAAQ9C,EAAEsB,EAAAL,IAAAO,UAAA,MAAA,aACRiB,EAAMzB,EAAAP,EADEsC,cAAA/B,c","file":"world_map.js","sourcesContent":["$(function() {\n  const map =  new WorldMapPlot(\"#world-map\");\n  d3.json(\"data/countries_info.json\").then(data => {\n    map.draw(data, ( (code, name) => {\n      updateCountryPassport(name, data[code])\n    }))\n  });\n})\n\n/**\n * Updates the sidebar next to the world map \n * @param {string} name The selected country name\n * @param {Object} info The country's data \n * @returns \n */\nfunction updateCountryPassport(name, info) {\n  $(\"#country-passport\").empty()\n  $(\"#country-passport\").append(`<h2>${name}</h2><br>`)\n  if (typeof info == 'undefined') {\n      $(\"#country-passport\").append(\"<p>Unfortunately, no information is available for that country... Try selecting another one!</p><br>\")\n      return \n  }\n  $(\"#country-passport\").append(`<p>Netflix has been available in this country since ${info.date_joined}.</p><br>`)\n\n  $(\"#country-passport\").append(\"<h4>Movies</h4><br>\")\n  $(\"#country-passport\").append(`<p class=\"count\">${info.count_movies}</p><br>`)\n  $(\"#country-passport\").append(\"<h4>TV Shows</h4><br>\")\n  $(\"#country-passport\").append(`<p class=\"count\">${info.count_series}</p><br>`)\n  $(\"#country-passport\").append(\"<h4>Top 10 genres</h4><br>\")\n  $(\"#country-passport\").append(`<p>${info.genres.join(', ')}</p><br>`)\n\n}\n\n/**\n * Construct a world map using the miller projection\n * and draw it in the container with the provided id \n */\nclass WorldMapPlot {\n  constructor(id) {\n    this.id = id;\n  }\n\n  /**\n   * Draws the given data on a map and calls the given callback\n   * when a region is selected\n   * @param {Object} data Data corresponding to countries \n   * @param {Function} callback Callback to call when selecting a region\n   */\n  draw(data, callback) {\n\n    // Compute total country counts to color map\n    let total_counts = {};\n    for (var key in data) {\n      total_counts[key] = data[key].count_movies + data[key].count_series;\n    }\n    \n    $(this.id).vectorMap({\n      map: 'world_mill',\n      hoverColor: false,\n      backgroundColor: '#000',\n      zoomOnScroll: false, \n      regionsSelectable: true,\n      regionsSelectableOne: true,\n      series: {\n        regions: [{\n          values: total_counts,\n          scale: ['#550000', '#D00000'],\n          normalizeFunction: 'polynomial',\n          legend: {\n            horizontal: true,\n            title: 'Catalogue size'\n          }\n        }]\n      },\n      regionStyle: {\n        initial: {\n          fill: '#564D4D',\n          \"fill-opacity\": 1,\n        },\n        hover: {\n          \"fill-opacity\": 0.8,\n        },\n        selected: {\n          fill: 'lightgray',\n          stroke: 'white',\n          \"stroke-width\": 3\n        },\n        selectedHover: {\n          \"fill-opacity\": 1,\n        }\n      },\n      zoomMax: 8, \n      zoomMin: 1, \n      zoomStep: 1.6,\n      // When selecting a region call the provided callback\n      // with the selected region\n      onRegionSelected: ((event, code, isSelected) => {\n        if (isSelected) {\n          let map=$(this.id).vectorMap('get', 'mapObject');\n          callback(code, map.getRegionName(code))\n        }\n      })\n    });  \n  }\n}"]}