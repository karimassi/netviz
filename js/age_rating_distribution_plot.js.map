{"version":3,"sources":["age_rating_distribution_plot.js"],"names":["zip","arr","_len","arguments","length","arrs","Array","_key","map","val","i","reduce","a","concat","_toConsumableArray","createAgeRatingDistriutionPlot","svg","data","main_color","sizeX","attr","MID_SIZE","axis","append","sizeY","flatMap","v","MAX_BAR_WIDTH","selectAll","ticksX","enter","value","position","tick","ticks","text","middle_bar","BAR_HEIGHT","style","BAR_OFFSET","shows","names","values","movies","name","VALUE_OFFSET","VALUE_GAP","point","_","$","d3","select"],"mappings":"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","file":"age_rating_distribution_plot.js","sourcesContent":["const zip = (arr, ...arrs) => {\n  return arr.map((val, i) => arrs.reduce((a, arr) => [...a, arr[i]], [val]));\n}\n\n$(() => {\n  let svg = d3.select('svg#age-rating-distribution-plot')\n  let data = {\n    'names': ['R+', '7+', '13+', '16+', '18+'],\n    'values': {\n      'shows': [0.1, 0.2, 0.2, 0.4, 0.1],\n      'movies': [0, 0.15, 0.25, 0.1, 0.5]\n    }\n  }\n  createAgeRatingDistriutionPlot(svg, data)\n})\n\nfunction createAgeRatingDistriutionPlot(svg, data) {\n  const main_color = 'whitesmoke';\n  let [sizeX, sizeY] = [800, 500]\n  svg.attr('viewBox', `0 0 ${sizeX} ${sizeY}`)\n\n  const MID_SIZE = 50\n  const MAX_BAR_WIDTH = (sizeX - MID_SIZE) / 2 - 30\n\n  let axis = svg.append('g')\n    .attr('width', sizeX)\n    .attr('transform', `translate(0, ${sizeY - 50})`)\n\n  axis.append('line')\n    .attr('stroke', main_color)\n    .attr('x1', 0)\n    .attr('y1', 0)\n    .attr('x2', sizeX)\n    .attr('y2', 0)\n\n  const ticksX = [\n    [(sizeX - MID_SIZE) / 2 - MAX_BAR_WIDTH, 100],\n    [(sizeX - MID_SIZE) / 2, 0]\n  ].flatMap(v =>\n    [{\n      position: v[0],\n      value: v[1]\n    }, {\n      position: sizeX - v[0],\n      value: v[1]\n    }])\n  const ticks = axis.selectAll('.plot-tick')\n    .data(ticksX)\n    .enter()\n\n  ticks.append('line')\n    .attr('stroke', main_color)\n    .attr('x1', tick => tick.position)\n    .attr('y1', 0)\n    .attr('x2', tick => tick.position)\n    .attr('y2', 5)\n\n  ticks.append('text')\n    .attr('fill', main_color)\n    .attr('y', 10)\n    .attr('x', tick => tick.position)\n    .style('text-anchor', 'middle')\n    .style('alignment-baseline', 'hanging')\n    .text(tick => tick.value + '%')\n\n\n  const middle_bar = svg.append('g')\n    .attr('width', MID_SIZE)\n    .attr('transform', `translate(${sizeX / 2}, ${sizeY - 50})`)\n    .style('background-color', main_color)\n\n  const BAR_HEIGHT = 50\n  const BAR_OFFSET = 32\n  const VALUE_GAP = 80\n  const VALUE_OFFSET = 50\n\n  data = zip(data.names, data.values.movies, data.values.shows).map(v => ({\n    name: v[0],\n    movies: v[1],\n    shows: v[2]\n  }))\n  const values = middle_bar.selectAll('.middle-bar-value')\n    .data(data)\n    .enter()\n  values.append('text')\n    .attr('fill', main_color)\n    .attr('x', 0)\n    .attr('y', (_, i) => -(VALUE_OFFSET + VALUE_GAP * i))\n    .style('text-anchor', 'middle')\n    .style('alignment-baseline', 'ideographic')\n    .text(point => point.name)\n\n\n\n  values.append('rect')\n    .attr('fill', 'red')\n    .attr('y', (_, i) => -(VALUE_OFFSET + VALUE_GAP * i + BAR_OFFSET))\n    .attr('x', MID_SIZE / 2)\n    .attr('height', BAR_HEIGHT)\n    .attr('width', point => point.shows * MAX_BAR_WIDTH)\n\n  values.append('rect')\n    .attr('fill', 'red')\n    .attr('y', (_, i) => -(VALUE_OFFSET + VALUE_GAP * i + BAR_OFFSET))\n    .attr('x', point => -MID_SIZE / 2 - point.movies * MAX_BAR_WIDTH)\n    .attr('height', BAR_HEIGHT)\n    .attr('width', point => point.movies * MAX_BAR_WIDTH)\n\n  svg.append('text')\n    .attr('x', (sizeX - MID_SIZE) / 2 - MAX_BAR_WIDTH)\n    .attr('fill', 'red')\n    .style('font-size', '2em')\n    .style('text-anchor', 'start')\n    .style('alignment-baseline', 'hanging')\n    .text('Movies')\n\n  svg.append('text')\n    .attr('x', sizeX - (sizeX - MID_SIZE) / 2 + MAX_BAR_WIDTH)\n    .attr('fill', 'red')\n    .style('font-size', '2em')\n    .style('text-anchor', 'end')\n    .style('alignment-baseline', 'hanging')\n    .text('TV Shows')\n}\n"]}